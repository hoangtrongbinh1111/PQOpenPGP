mod! ML-KEM {
    [MLK-SecretK MLK-PublicK MLK-Cipher MLK-ShareS]

    -- KeyGen and Encaps are probabilistic, 
    -- so we must add an argument of MLK-SecretK
    op mlk-keygen  : MLK-SecretK -> MLK-PublicK {constr}
    -- Encaps: returns ciphertext
    op mlk-encapsC : MLK-PublicK MLK-SecretK -> MLK-Cipher {constr}
    -- Encaps: returns shared key
    op mlk-encapsK : MLK-PublicK MLK-SecretK -> MLK-ShareS
    op mlk-decaps  : MLK-Cipher MLK-SecretK -> MLK-ShareS

    -- constructor of a shared key is a secret key pair
    op _&_ : MLK-SecretK MLK-SecretK -> MLK-ShareS {constr}

    -- projection functions
    op mlk-getSecret : MLK-PublicK -> MLK-SecretK
    op mlk-getSecret : MLK-Cipher  -> MLK-SecretK
    op mlk-getPublic : MLK-Cipher  -> MLK-PublicK

    vars K' K2' K3' K4' : MLK-SecretK
    vars PK' PK2' : MLK-PublicK
    vars C C2 : MLK-Cipher
    var KP : MLK-ShareS

    eq mlk-getSecret(mlk-keygen(K')) = K' .
    eq mlk-getSecret(mlk-encapsC(PK', K2')) = K2' .
    eq mlk-getPublic(mlk-encapsC(PK', K2')) = PK' .
    eq (PK' = PK2') = (mlk-getSecret(PK') = mlk-getSecret(PK2')) .
    eq mlk-encapsK(PK',K') = (mlk-getSecret(PK') & K') .

    -- Decaps(C,K') properly outputs the shared secret only if 
    -- C encapsulates some secret to the associated public key of K'
    ceq mlk-decaps(C, K') = (K' & mlk-getSecret(C)) if (mlk-getPublic(C) = mlk-keygen(K')) .
    -- Decaps(C,K) cannot be (K' & K2') if C does not encapsulate K2'.
    ceq (mlk-decaps(C, K') = (K' & K2')) = false if not(K2' = mlk-getSecret(C)) .
    ceq (mlk-decaps(C, K') = (K2' & K3')) = false if not(K' = K2') .

    eq ((K' & K2') = (K3' & K4'))
        = (K' = K3' and K2' = K4') .
    eq (mlk-encapsK(PK',K') = mlk-encapsK(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (mlk-encapsC(PK',K') = mlk-encapsC(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (mlk-decaps(C,K') = mlk-decaps(C2,K2')) =
        (C = C2 and K' = K2') .
}

mod! ECDH-KEM {
    [ECDHK-SecretK ECDHK-PublicK ECDHK-Cipher ECDHK-ShareS]

    -- KeyGen and Encaps are probabilistic, 
    -- so we must add an argument of ECDHK-SecretK
    op ecdhk-keygen  : ECDHK-SecretK -> ECDHK-PublicK {constr}
    -- Encaps: returns ciphertext
    op ecdhk-encapsC : ECDHK-PublicK ECDHK-SecretK -> ECDHK-Cipher {constr}
    -- Encaps: returns shared key
    op ecdhk-encapsK : ECDHK-PublicK ECDHK-SecretK -> ECDHK-ShareS
    op ecdhk-decaps  : ECDHK-Cipher ECDHK-SecretK -> ECDHK-ShareS

    -- constructor of a shared key is a secret key pair
    op _&_ : ECDHK-SecretK ECDHK-SecretK -> ECDHK-ShareS {constr}

    -- projection functions
    op ecdhk-getSecret : ECDHK-PublicK -> ECDHK-SecretK
    op ecdhk-getSecret : ECDHK-Cipher  -> ECDHK-SecretK
    op ecdhk-getPublic : ECDHK-Cipher  -> ECDHK-PublicK

    vars K' K2' K3' K4' : ECDHK-SecretK
    vars PK' PK2' : ECDHK-PublicK
    vars C C2 : ECDHK-Cipher
    var KP : ECDHK-ShareS

    eq ecdhk-getSecret(ecdhk-keygen(K')) = K' .
    eq ecdhk-getSecret(ecdhk-encapsC(PK', K2')) = K2' .
    eq ecdhk-getPublic(ecdhk-encapsC(PK', K2')) = PK' .
    eq (PK' = PK2') = (ecdhk-getSecret(PK') = ecdhk-getSecret(PK2')) .
    eq ecdhk-encapsK(PK',K') = (ecdhk-getSecret(PK') & K') .

    -- Decaps(C,K') properly outputs the shared secret only if 
    -- C encapsulates some secret to the associated public key of K'
    ceq ecdhk-decaps(C, K') = (K' & ecdhk-getSecret(C)) if (ecdhk-getPublic(C) = ecdhk-keygen(K')) .
    -- Decaps(C,K) cannot be (K' & K2') if C does not encapsulate K2'.
    ceq (ecdhk-decaps(C, K') = (K' & K2')) = false if not(K2' = ecdhk-getSecret(C)) .
    ceq (ecdhk-decaps(C, K') = (K2' & K3')) = false if not(K' = K2') .

    eq ((K' & K2') = (K3' & K4'))
        = (K' = K3' and K2' = K4') .
    eq (ecdhk-encapsK(PK',K') = ecdhk-encapsK(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (ecdhk-encapsC(PK',K') = ecdhk-encapsC(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (ecdhk-decaps(C,K') = ecdhk-decaps(C2,K2')) =
        (C = C2 and K' = K2') .
}

mod* KEY-ENCRYPTION-KEY {
  pr(ECDH-KEM + ML-KEM)

  [ KeyEncKey ]

  -- Key combination to produce the key-encryption key
  op kcombine : MLK-ShareS ECDHK-ShareS MLK-Cipher ECDHK-Cipher MLK-PublicK ECDHK-PublicK -> KeyEncKey {constr}

  vars MLK-PK' MLK-PK2' : MLK-PublicK
  vars MLK-C MLK-C2 : MLK-Cipher
  vars MLK-S MLK-S2 : MLK-ShareS

  vars ECDHK-PK' ECDHK-PK2' : ECDHK-PublicK
  vars ECDHK-C ECDHK-C2 : ECDHK-Cipher
  vars ECDHK-S ECDHK-S2 : ECDHK-ShareS

  eq (kcombine(MLK-S,ECDHK-S,MLK-C,ECDHK-C,MLK-PK',ECDHK-PK') = kcombine(MLK-S2,ECDHK-S2,MLK-C2,ECDHK-C2,MLK-PK2',ECDHK-PK2')) =
        (MLK-S = MLK-S2 and MLK-C = MLK-C2 and MLK-PK' = MLK-PK2' and ECDHK-S = ECDHK-S2 and ECDHK-C = ECDHK-C2 and ECDHK-PK' = ECDHK-PK2') .
}

mod* SESSION-KEY {
  [ SessionKey ]
}

mod* ML-DSA {
  [ MLDSA-PublicK MLDSA-PrivateK ]

  vars PK PK2 : MLDSA-PublicK .
  vars SK SK2 : MLDSA-PrivateK .
  -- Derivation of the associated public key from a private key
  op mldsa-getPublic : MLDSA-PrivateK -> MLDSA-PublicK {constr}
  op mldsa-getPrivate : MLDSA-PublicK -> MLDSA-PrivateK {constr}

  eq mldsa-getPublic(mldsa-getPrivate(PK)) = PK .
  eq mldsa-getPrivate(mldsa-getPublic(SK)) = SK .

  eq (PK = PK2) = (mldsa-getPrivate(PK) = mldsa-getPrivate(PK2)) .
}

mod* Ed-DSA {
  [ EdDSA-PublicK EdDSA-PrivateK ]

  vars PK PK2 : EdDSA-PublicK .
  vars SK SK2 : EdDSA-PrivateK .
  -- Derivation of the associated public key from a private key
  op eddsa-getPublic : EdDSA-PrivateK -> EdDSA-PublicK {constr}
  op eddsa-getPrivate : EdDSA-PublicK -> EdDSA-PrivateK {constr}

  eq eddsa-getPublic(eddsa-getPrivate(PK)) = PK .
  eq eddsa-getPrivate(eddsa-getPublic(SK)) = SK .

  eq (PK = PK2) = (eddsa-getPrivate(PK) = eddsa-getPrivate(PK2)) .
}

-- participants of the protocol
mod* PRINCIPAL {
    pr(NAT + Ed-DSA + ECDH-KEM + ML-DSA + ML-KEM)
    [Prin]
    op intru : -> Prin {constr}

    op MLDSA-PriK : Prin -> MLDSA-PrivateK {constr} 
    op MLDSA-PubK : Prin -> MLDSA-PublicK {constr} 

    op EdDSA-PriK : Prin -> EdDSA-PrivateK {constr} 
    op EdDSA-PubK : Prin -> EdDSA-PublicK {constr} 

    op MLK-PubK : Prin -> MLK-PublicK {constr} 
    op MLK-PriK : Prin -> MLK-SecretK {constr} 

    op ECDHK-PubK : Prin -> ECDHK-PublicK {constr} 
    op ECDHK-PriK : Prin -> ECDHK-SecretK {constr} 

    vars A B : Prin 
    eq (MLDSA-PriK(A) = MLDSA-PriK(B)) = (A = B) .
    eq (MLDSA-PubK(A) = MLDSA-PubK(B)) = (A = B) .
    eq (EdDSA-PriK(A) = EdDSA-PriK(B)) = (A = B) .
    eq (EdDSA-PubK(A) = EdDSA-PubK(B)) = (A = B) .
    eq (MLK-PubK(A) = MLK-PubK(B)) = (A = B) .
    eq (MLK-PriK(A) = MLK-PriK(B)) = (A = B) .
    eq (ECDHK-PubK(A) = ECDHK-PubK(B)) = (A = B) .
    eq (ECDHK-PriK(A) = ECDHK-PriK(B)) = (A = B) .
}

mod* RAW-MESSAGE {
  [RawMsg]
}
mod! DATA {
  pr(ECDH-KEM)
  pr(Ed-DSA)
  pr(ML-KEM)
  pr(ML-DSA)
  pr(KEY-ENCRYPTION-KEY)
  pr(PRINCIPAL)
  pr(SESSION-KEY)
  pr(RAW-MESSAGE)

  [Data < DataL]
  [ECDHK-SecretK ECDHK-PublicK ECDHK-Cipher ECDHK-ShareS MLK-SecretK MLK-PublicK MLK-Cipher MLK-ShareS KeyEncKey Prin RawMsg SessionKey MLDSA-PublicK MLDSA-PrivateK EdDSA-PublicK EdDSA-PrivateK < Data]

  -- concatenation function
  op _||_ : DataL DataL -> DataL {assoc r-assoc constr}
  -- membership function
  op _\in_ : DataL DataL -> Bool

  vars D1 D2 : Data
  vars DL DL2 DL3 : DataL
  var P : Prin
  var EcdhkSecK : ECDHK-SecretK
  var EcdhkPubK : ECDHK-PublicK
  var EcdhkCi : ECDHK-Cipher
  var EcdhkSS : ECDHK-ShareS

  var MlkSecK : MLK-SecretK
  var MlkPubK : MLK-PublicK
  var MlkCi : MLK-Cipher
  var MlkSS : MLK-ShareS

  var KEK : KeyEncKey
  var RwM : RawMsg
  var SK : SessionKey

  var MldsaPubK : MLDSA-PublicK
  var MldsaSecK : MLDSA-PrivateK

  var EddsaPubK : EdDSA-PublicK
  var EddsaSecK : EdDSA-PrivateK

  -- Định nghĩa các cấu trúc cơ bản
  eq (D1 = (D2 || DL2)) = false .
  eq ((D1 || DL) = (D2 || DL2)) 
      = (D1 = D2 and DL = DL2) .

  eq (D1 || DL) \in D2 = false .
  eq (D1 || DL) \in DL2 = (D1 \in DL2 and DL \in DL2) .
  eq D1 \in D2 = (D1 = D2) .
  eq D1 \in (D2 || DL2) = (D1 = D2 or D1 \in DL2) .
  -- lemmas
  eq D1 \in (DL2 || DL3) = D1 \in DL2 or D1 \in DL3 .
  ceq DL \in (DL2 || DL3) = true if DL \in DL3 .

  ceq (P = D1) = false if (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (EcdhkSecK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (EcdhkPubK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (EcdhkSS = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (MlkSecK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (MlkPubK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (MlkCi = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (EcdhkCi = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is MLK-Cipher) .
  ceq (MlkSS = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (KEK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (RwM = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (SK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (MldsaPubK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (MldsaSecK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (EddsaPubK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
  ceq (EddsaSecK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is ECDHK-Cipher) .
}

mod! ENCRYPTION {
  ex(DATA)
  
  --            Data                          Hash
  op h      : DataL                      -> Data {constr}

  -- Ed DSA signature scheme
  op EdDSA-Sign   : EdDSA-PrivateK Data -> Data -- Sign digest
  op EdDSA-Verify : EdDSA-PublicK Data Data -> Bool

  -- ML DSA signature scheme
  op MLDSA-Sign   : MLDSA-PrivateK Data -> Data -- Sign digest
  op MLDSA-Verify : MLDSA-PublicK Data Data -> Bool

  -- Symmetric encryption
  op senc : SessionKey DataL -> Data       -- Encrypt plaintext
  op senc : KeyEncKey SessionKey -> Data     -- Encrypt session key

  -- Decryption
  op sdec : SessionKey Data -> DataL         -- Decrypt ciphertext
  op sdec : KeyEncKey Data -> SessionKey     -- Decrypt session key

  -- Variables
  vars A B : Prin 
  vars SIGN SIGN2 D0 D1 D2 KE KE2 : Data
  vars DL1 DL2 : DataL
  vars K K2 : SessionKey

  vars EdDSA-SK EdDSA-SK2 : EdDSA-PrivateK
  var EdDSA-PK : EdDSA-PublicK

  vars MLDSA-SK MLDSA-SK2 : MLDSA-PrivateK
  var MLDSA-PK : MLDSA-PublicK
  vars KEK KEK2 : KeyEncKey

  eq (h(DL1) = h(DL2)) = (DL1 = DL2) .

  eq (EdDSA-Sign(EdDSA-SK,D1) = EdDSA-Sign(EdDSA-SK2,D2)) = (EdDSA-SK = EdDSA-SK2 and D1 = D2) .
  eq (h(DL1) = EdDSA-Sign(EdDSA-SK,D2)) = false .
  eq EdDSA-Verify(EdDSA-PK, SIGN, D2) = (SIGN = EdDSA-Sign(eddsa-getPrivate(EdDSA-PK),D2)) .

  eq (MLDSA-Sign(MLDSA-SK,D1) = MLDSA-Sign(MLDSA-SK2,D2)) = (MLDSA-SK = MLDSA-SK2 and D1 = D2) .
  eq (h(DL1) = MLDSA-Sign(MLDSA-SK,D2)) = false .
  eq MLDSA-Verify(MLDSA-PK, SIGN, D2) = (SIGN = MLDSA-Sign(mldsa-getPrivate(MLDSA-PK),D2)) .

  eq (senc(K,DL1) = senc(K2,DL2)) = (K = K2 and DL1 = DL2) .
  eq sdec(K, senc(K,DL1)) = DL1 .
  eq (sdec(K, D1) = DL1) = (D1 = senc(K,DL1)) .

  eq (senc(KEK,K) = senc(KEK2,K2)) = (KEK = KEK2 and K = K2) .
  eq sdec(KEK, senc(K,KEK)) = K .
  eq (sdec(KEK, D1) = K) = (D1 = senc(KEK,K)) .

  ceq (h(DL1) = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .

  ceq (MLDSA-Sign(MLDSA-SK,D0) = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .

  ceq (EdDSA-Sign(EdDSA-SK,D0) = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-SecretK) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-SecretK) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is KeyEncKey) or (D1 :is RawMsg) or (D1 :is SessionKey) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) .
}

mod! MESSAGE {
  pr(ENCRYPTION)
  [Msg]
  op msg1 : Prin Prin Prin DataL -> Msg {constr}
  op msg2 : Prin Prin Prin DataL -> Msg {constr}
 
  vars A B A2 B2 A' A2' : Prin 
  vars D D2 : DataL 
  eq (msg1(A',A,B,D) = msg1(A2',A2,B2,D2)) =
    (A' = A2' and A = A2 and B = B2 and D = D2) .
  eq (msg2(A',A,B,D) = msg2(A2',A2,B2,D2)) =
    (A' = A2' and A = A2 and B = B2 and D = D2) .
  eq (msg1(A',A,B,D) = msg2(A2',A2,B2,D2)) = false .
}

mod! SET (D :: TRIV) {
  [Elt.D < Set]
  op empty : -> Set {constr}
  op __ : Set Set -> Set {assoc constr comm idem id: empty}
  op _\in_ : Elt.D Set -> Bool
  var S : Set
  vars E1 E2 : Elt.D
  eq E1 \in empty = false .
  eq E1 \in E2 = (E1 = E2) .
  eq E1 \in (E2 S) = (E1 = E2) or (E1 \in S) .
}

mod! BAG (D :: TRIV) {
  [Elt.D < Bag]
  op void : -> Bag {constr}
  op _,_ : Bag Bag -> Bag {assoc constr comm id: void}
  op _\in_ : Elt.D Bag -> Bool
  var B : Bag
  vars E1 E2 : Elt.D
  eq E1 \in void = false .
  eq E1 \in E2 = (E1 = E2) .
  eq E1 \in (E2,B) = (E1 = E2) or (E1 \in B) .
}

view TRIV2MESSAGE from TRIV to MESSAGE {
  sort Elt -> Msg
}
mod! NETWORK {
  pr(BAG(D <= TRIV2MESSAGE)*{sort Bag -> Network})
}
view TRIV2DATA from TRIV to DATA {
  sort Elt -> Data
}

mod* PQOPENPGP {
  pr(NETWORK)
  pr(SET(D <= TRIV2DATA)*{sort Set -> SecretKS})

  [Sys]
  -- initial states and transitions
  op init : -> Sys {constr}

  -- transitions
  -- send from Alice to Bob with his public key: ecdh KEM PublicKey and ML KEM public key
  op send1 : Sys Prin Prin ECDHK-SecretK MLK-SecretK -> Sys {constr}
  -- send from Bob to Alice with message C1 || C2 and his information: EdDSA public key and MLDSA public key
  op send2 : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK ECDHK-PublicK MLK-PublicK EdDSA-PrivateK MLDSA-PrivateK -> Sys {constr}

  -- observers
  op nw : Sys -> Network
  op usecret : Sys -> SecretKS
  op leakscr : Sys -> SecretKS
  op knl : Sys -> DataL

  var S : Sys
  vars M M2 : RawMsg
  vars K K2 : SessionKey
  vars A B A2 B2 : Prin

  vars Mlk-SK Mlk-SK2 : MLK-SecretK
  vars Mlk-PK Mlk-PK2 : MLK-PublicK 
  vars Mlk-Ci : MLK-Cipher 

  vars Ecdhk-SK Ecdhk-SK2 : ECDHK-SecretK
  vars Ecdhk-PK Ecdhk-PK2 : ECDHK-PublicK 
  vars Ecdhk-Ci : ECDHK-Cipher 

  vars Eddsa-PK : EdDSA-PublicK 
  vars Mldsa-PK : MLDSA-PublicK 

  vars Eddsa-SK : EdDSA-PrivateK 
  vars Mldsa-SK : MLDSA-PrivateK 

  vars DL : DataL

  -- initial states
  eq nw(init) = void .
  eq usecret(init) = empty .
  eq leakscr(init) = empty .
  eq knl(init) = (MLDSA-PriK(intru) || MLDSA-PubK(intru) || EdDSA-PriK(intru) || EdDSA-PubK(intru) || MLK-PubK(intru) || MLK-PriK(intru) || ECDHK-PubK(intru) || ECDHK-PriK(intru)) . 

  -- *************************** START: SEND1 *************************** --
  op c-send1 : Sys ECDHK-SecretK MLK-SecretK -> Bool .
  eq c-send1(S,Ecdhk-SK,Mlk-SK) = not (Ecdhk-SK \in usecret(S) or Mlk-SK \in usecret(S)) .

  ceq nw(send1(S,A,B,Ecdhk-SK,Mlk-SK)) = (msg1(A,A,B, (ecdhk-keygen(Ecdhk-SK) || mlk-keygen(Mlk-SK))) , nw(S)) if c-send1(S,Ecdhk-SK,Mlk-SK) .
  ceq usecret(send1(S,A,B,Ecdhk-SK,Mlk-SK)) = (Ecdhk-SK Mlk-SK usecret(S)) if c-send1(S,Ecdhk-SK,Mlk-SK) .
  eq leakscr(send1(S,A,B,Ecdhk-SK,Mlk-SK)) = leakscr(S) .
  ceq knl(send1(S,A,B,Ecdhk-SK,Mlk-SK)) = (ecdhk-keygen(Ecdhk-SK) || mlk-keygen(Mlk-SK) || knl(S)) if c-send1(S,Ecdhk-SK,Mlk-SK) .
  ceq send1(S,A,B,Ecdhk-SK,Mlk-SK) = S if not c-send1(S,Ecdhk-SK,Mlk-SK) .
  
  -- *************************** START: SEND2 *************************** --
  -- Notion: 
            -- send C1 || C2 || EdDSA public key || MLDSA public key
              -- C1 = ECDH Cipher || MLK Cipher || KC 
                  -- KC = senc(kcombine(MLK ss, ECDH ss, MLK c, ECDH c, mlk PK, ecdh PK),K)
              -- C2 = senc(k,EdDSA Sign || ML DSA Sign || M)

  op c-send2 : Sys Prin Prin Prin ECDHK-SecretK MLK-SecretK ECDHK-PublicK MLK-PublicK SessionKey -> Bool .
  eq c-send2(S,A2,A,B,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,K) = 
   (msg1(A2,A,B, Ecdhk-PK || Mlk-PK) \in nw(S) and 
    not(Ecdhk-SK2 \in usecret(S)) and  
    not(Mlk-SK2 \in usecret(S)) and not(K \in usecret(S))) .

  ceq nw(send2(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,Eddsa-SK,Mldsa-SK)) = (msg2(B,B,A, (ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK2) || mlk-encapsC(Mlk-PK,Mlk-SK2) || senc(kcombine(mlk-encapsK(Mlk-PK,Mlk-SK2),ecdhk-encapsK(Ecdhk-PK,Ecdhk-SK2),mlk-encapsC(Mlk-PK,Mlk-SK2),ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK2),Mlk-PK,Ecdhk-PK),K)) || (senc(K,EdDSA-Sign(Eddsa-SK,h(M)) || MLDSA-Sign(Mldsa-SK,h(M)) || M)) || eddsa-getPublic(Eddsa-SK) || mldsa-getPublic(Mldsa-SK)) , nw(S)) if c-send2(S,A2,A,B,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,K) .
  ceq usecret(send2(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,Eddsa-SK,Mldsa-SK)) = (K Ecdhk-SK2 Mlk-SK2 Eddsa-SK Mldsa-SK usecret(S)) if c-send2(S,A2,A,B,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,K) .
  eq leakscr(send2(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,Eddsa-SK,Mldsa-SK)) = leakscr(S) .
  ceq knl(send2(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,Eddsa-SK,Mldsa-SK)) = ((ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK2) || mlk-encapsC(Mlk-PK,Mlk-SK2) || senc(kcombine(mlk-encapsK(Mlk-PK,Mlk-SK2),ecdhk-encapsK(Ecdhk-PK,Ecdhk-SK2),mlk-encapsC(Mlk-PK,Mlk-SK2),ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK2),Mlk-PK,Ecdhk-PK),K)) || senc(K,EdDSA-Sign(Eddsa-SK,h(M)) || MLDSA-Sign(Mldsa-SK,h(M)) || M) || eddsa-getPublic(Eddsa-SK) || mldsa-getPublic(Mldsa-SK) || knl(S)) if c-send2(S,A2,A,B,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,K) .
  ceq send2(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,Eddsa-SK,Mldsa-SK) = S if not c-send2(S,A2,A,B,Ecdhk-SK2,Mlk-SK2,Ecdhk-PK,Mlk-PK,K) .

  -- -- intruder capabilities

  -- randomly selecting a ML-KEM secret key and a ECDH-KEM secret key by themself. and intruder can keygen public key and send to receiver Bob, and Bob dont know, then send a message to the intruder
  op intruRandKEMSecret : Sys MLK-SecretK ECDHK-SecretK -> Sys {constr}
  op c-intruRandKEMSecret : Sys MLK-SecretK ECDHK-SecretK -> Bool .
  eq c-intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK) = not(Mlk-SK \in usecret(S) or Ecdhk-SK \in usecret(S)) .
  eq nw(intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK)) = nw(S) .
  ceq usecret(intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK)) = (Mlk-SK Ecdhk-SK usecret(S))
    if c-intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK) .
  eq leakscr(intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK)) = leakscr(S) .
  ceq knl(intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK)) = (ecdhk-keygen(Ecdhk-SK) || mlk-keygen(Mlk-SK) || knl(S))
    if c-intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK) .
  ceq intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK) = S 
    if not c-intruRandKEMSecret(S,Mlk-SK,Ecdhk-SK) .

  -- performing Encaps
  op gEncaps : Sys MLK-SecretK MLK-PublicK ECDHK-SecretK ECDHK-PublicK -> Sys {constr}
  op c-gEncaps : Sys MLK-SecretK MLK-PublicK ECDHK-SecretK ECDHK-PublicK -> Bool
  eq c-gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK) = (Mlk-SK \in knl(S) and Mlk-PK \in knl(S) and Ecdhk-SK \in knl(S) and Ecdhk-PK \in knl(S)) .
  eq nw(gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK)) = nw(S) . 
  eq usecret(gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK)) = usecret(S) . 
  ceq knl(gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK)) = 
      (mlk-encapsK(Mlk-PK,Mlk-SK) || mlk-encapsC(Mlk-PK,Mlk-SK) || ecdhk-encapsK(Ecdhk-PK,Ecdhk-SK) || ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK) || knl(S)) 
    if c-gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK) . 
  ceq gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK) = S 
    if not c-gEncaps(S,Mlk-SK,Mlk-PK,Ecdhk-SK,Ecdhk-PK) .

  -- performing Decaps
  op gDecaps : Sys MLK-SecretK MLK-Cipher ECDHK-SecretK ECDHK-Cipher -> Sys {constr}
  op c-gDecaps : Sys MLK-SecretK MLK-Cipher ECDHK-SecretK ECDHK-Cipher -> Bool
  eq c-gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci) = (Mlk-SK \in knl(S) and Mlk-Ci \in knl(S) and Ecdhk-SK \in knl(S) and Ecdhk-Ci \in knl(S)) .
  eq nw(gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci)) = nw(S) . 
  eq usecret(gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci)) = usecret(S) . 
  ceq knl(gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci)) = 
      (mlk-decaps(Mlk-Ci,Mlk-SK) || ecdhk-decaps(Ecdhk-Ci,Ecdhk-SK) || knl(S)) 
    if c-gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci) . 
  ceq gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci) = S 
    if not c-gDecaps(S,Mlk-SK,Mlk-Ci,Ecdhk-SK,Ecdhk-Ci) .
}