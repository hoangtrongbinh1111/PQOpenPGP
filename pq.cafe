mod! ML-KEM {
    [MLK-SecretK MLK-PublicK MLK-Cipher MLK-ShareS]

    -- KeyGen and Encaps are probabilistic, seed input (randomness source)
    op mlk-keygen  : MLK-SecretK -> MLK-PublicK {constr}
    -- Encaps: returns ciphertext / receiver's pk + sender's ephemeral sk -> ciphertext
    op mlk-encapsC : MLK-PublicK MLK-SecretK -> MLK-Cipher {constr}
    -- Encaps: returns shared key / receiver's pk + sender's ephemeral sk -> shared secret
    op mlk-encapsK : MLK-PublicK MLK-SecretK -> MLK-ShareS
    -- ciphertext + receiver's long-term sk -> shared secret
    op mlk-decaps  : MLK-Cipher MLK-SecretK -> MLK-ShareS

    -- constructor of a shared key is a secret key pair
    op _&_ : MLK-SecretK MLK-SecretK -> MLK-ShareS {constr}

    -- projection functions
    op mlk-getSecret : MLK-PublicK -> MLK-SecretK
    op mlk-getSecret : MLK-Cipher  -> MLK-SecretK
    op mlk-getPublic : MLK-Cipher  -> MLK-PublicK

    vars K' K2' K3' K4' : MLK-SecretK
    vars PK' PK2' : MLK-PublicK
    vars C C2 : MLK-Cipher

    eq mlk-getSecret(mlk-keygen(K')) = K' .
    eq mlk-getSecret(mlk-encapsC(PK', K2')) = K2' .
    eq mlk-getPublic(mlk-encapsC(PK', K2')) = PK' .
    eq (PK' = PK2') = (mlk-getSecret(PK') = mlk-getSecret(PK2')) .
    eq mlk-encapsK(PK',K') = (mlk-getSecret(PK') & K') .

    -- Decaps(C,K') properly outputs the shared secret only if 
    -- C encapsulates some secret to the associated public key of K'
    ceq mlk-decaps(C, K') = (K' & mlk-getSecret(C)) if (mlk-getPublic(C) = mlk-keygen(K')) .
    -- Decaps(C,K) cannot be (K' & K2') if C does not encapsulate K2'.
    ceq (mlk-decaps(C, K') = (K' & K2')) = false if not(K2' = mlk-getSecret(C)) .
    ceq (mlk-decaps(C, K') = (K2' & K3')) = false if not(K' = K2') .

    eq ((K' & K2') = (K3' & K4'))
        = (K' = K3' and K2' = K4') .
    eq (mlk-encapsK(PK',K') = mlk-encapsK(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (mlk-encapsC(PK',K') = mlk-encapsC(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (mlk-decaps(C,K') = mlk-decaps(C2,K2')) =
        (C = C2 and K' = K2') .
}

mod! ECDH-KEM {
    [ECDHK-SecretK ECDHK-PublicK ECDHK-Cipher ECDHK-ShareS]

    -- KeyGen and Encaps are probabilistic, 
    -- so we must add an argument of ECDHK-SecretK
    op ecdhk-keygen  : ECDHK-SecretK -> ECDHK-PublicK {constr}
    -- Encaps: returns ciphertext
    op ecdhk-encapsC : ECDHK-PublicK ECDHK-SecretK -> ECDHK-Cipher {constr}
    -- Encaps: returns shared key
    op ecdhk-encapsK : ECDHK-PublicK ECDHK-SecretK -> ECDHK-ShareS
    op ecdhk-decaps  : ECDHK-Cipher ECDHK-SecretK -> ECDHK-ShareS

    -- constructor of a shared key is a secret key pair
    op _&_ : ECDHK-SecretK ECDHK-SecretK -> ECDHK-ShareS {constr}

    -- projection functions
    op ecdhk-getSecret : ECDHK-PublicK -> ECDHK-SecretK
    op ecdhk-getSecret : ECDHK-Cipher  -> ECDHK-SecretK
    op ecdhk-getPublic : ECDHK-Cipher  -> ECDHK-PublicK

    vars K' K2' K3' K4' : ECDHK-SecretK
    vars PK' PK2' : ECDHK-PublicK
    vars C C2 : ECDHK-Cipher

    eq ecdhk-getSecret(ecdhk-keygen(K')) = K' .
    eq ecdhk-getSecret(ecdhk-encapsC(PK', K2')) = K2' .
    eq ecdhk-getPublic(ecdhk-encapsC(PK', K2')) = PK' .
    eq (PK' = PK2') = (ecdhk-getSecret(PK') = ecdhk-getSecret(PK2')) .
    eq ecdhk-encapsK(PK',K') = (ecdhk-getSecret(PK') & K') .

    -- Decaps(C,K') properly outputs the shared secret only if 
    -- C encapsulates some secret to the associated public key of K'
    ceq ecdhk-decaps(C, K') = (K' & ecdhk-getSecret(C)) if (ecdhk-getPublic(C) = ecdhk-keygen(K')) .
    -- Decaps(C,K) cannot be (K' & K2') if C does not encapsulate K2'.
    ceq (ecdhk-decaps(C, K') = (K' & K2')) = false if not(K2' = ecdhk-getSecret(C)) .
    ceq (ecdhk-decaps(C, K') = (K2' & K3')) = false if not(K' = K2') .

    eq ((K' & K2') = (K3' & K4'))
        = (K' = K3' and K2' = K4') .
    eq (ecdhk-encapsK(PK',K') = ecdhk-encapsK(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (ecdhk-encapsC(PK',K') = ecdhk-encapsC(PK2',K2')) =
        (PK' = PK2' and K' = K2') .
    eq (ecdhk-decaps(C,K') = ecdhk-decaps(C2,K2')) =
        (C = C2 and K' = K2') .
}

mod* KEY-ENCRYPTION-KEY {
  [ KeyEncKey ]
}

mod* SESSION-KEY {
  [ SessionKey ]
}

mod* ML-DSA {
  [ MLDSA-PublicK MLDSA-PrivateK ]

  vars PK PK2 : MLDSA-PublicK .
  vars SK SK2 : MLDSA-PrivateK .
  -- Derivation of the associated public key from a private key
  op mldsa-public : MLDSA-PrivateK -> MLDSA-PublicK {constr}
  op mldsa-getPrivate : MLDSA-PublicK -> MLDSA-PrivateK

  eq mldsa-public(mldsa-getPrivate(PK)) = PK .
  eq mldsa-getPrivate(mldsa-public(SK)) = SK .

  eq (PK = PK2) = (mldsa-getPrivate(PK) = mldsa-getPrivate(PK2)) .
}

mod* Ed-DSA {
  [ EdDSA-PublicK EdDSA-PrivateK ]

  vars PK PK2 : EdDSA-PublicK .
  vars SK SK2 : EdDSA-PrivateK .
  -- Derivation of the associated public key from a private key
  op eddsa-public : EdDSA-PrivateK -> EdDSA-PublicK {constr}
  op eddsa-getPrivate : EdDSA-PublicK -> EdDSA-PrivateK

  eq eddsa-public(eddsa-getPrivate(PK)) = PK .
  eq eddsa-getPrivate(eddsa-public(SK)) = SK .

  eq (PK = PK2) = (eddsa-getPrivate(PK) = eddsa-getPrivate(PK2)) .
}

-- participants of the protocol
mod* PRINCIPAL {
    pr(Ed-DSA + ECDH-KEM + ML-DSA + ML-KEM + NAT)
    [Prin PriKey PriKeyTime]
    op intru : -> Prin {constr}

    -- The following operators define long-term keys for a principal
    op MLDSA-PriK : Prin -> MLDSA-PrivateK {constr} 
    op MLDSA-PubK : Prin -> MLDSA-PublicK 

    op EdDSA-PriK : Prin -> EdDSA-PrivateK {constr} 
    op EdDSA-PubK : Prin -> EdDSA-PublicK

    op MLK-PubK : Prin -> MLK-PublicK 
    op MLK-PriK : Prin -> MLK-SecretK {constr} 

    op ECDHK-PubK : Prin -> ECDHK-PublicK 
    op ECDHK-PriK : Prin -> ECDHK-SecretK {constr} 

    eq ECDHK-PubK(B) = ecdhk-keygen(ECDHK-PriK(B)) .
    eq MLK-PubK(B) = mlk-keygen(MLK-PriK(B)) .
    eq MLDSA-PubK(B) = mldsa-public(MLDSA-PriK(B)) .
    eq EdDSA-PubK(B) = eddsa-public(EdDSA-PriK(B)) .

    vars A B : Prin 
    eq (MLDSA-PriK(A) = MLDSA-PriK(B)) = (A = B) .
    eq (MLDSA-PubK(A) = MLDSA-PubK(B)) = (A = B) .
    eq (EdDSA-PriK(A) = EdDSA-PriK(B)) = (A = B) .
    eq (EdDSA-PubK(A) = EdDSA-PubK(B)) = (A = B) .
    eq (MLK-PubK(A) = MLK-PubK(B)) = (A = B) .
    eq (MLK-PriK(A) = MLK-PriK(B)) = (A = B) .
    eq (ECDHK-PubK(A) = ECDHK-PubK(B)) = (A = B) .
    eq (ECDHK-PriK(A) = ECDHK-PriK(B)) = (A = B) .

    -- for the forward secrecy property,
    -- pkNPair(LSK,N) will be used later, 
    -- where N indicates the time when LSK was compromised
    op pkNPair : PriKey Nat -> PriKeyTime {constr}
    op priK : PriKeyTime -> PriKey
    op time : PriKeyTime -> Nat
    vars N N2 : Nat
    vars LSK LSK2 : PriKey
    eq priK(pkNPair(LSK, N)) = LSK .
    eq time(pkNPair(LSK, N)) = N .
    eq (pkNPair(LSK, N) = pkNPair(LSK2, N2))
      = (LSK = LSK2 and N = N2) .

    -- trivial lemmas
    ceq (s(N) < N2) = false if not(N < N2) .
    eq (N < N) = false .
}

mod* RAW-MESSAGE {
  [RawMsg]
}
mod! DATA {
  pr(ECDH-KEM)
  pr(Ed-DSA)
  pr(ML-KEM)
  pr(ML-DSA)
  pr(KEY-ENCRYPTION-KEY)
  pr(PRINCIPAL)
  pr(SESSION-KEY)
  pr(RAW-MESSAGE)

  [Data ErrData < Data&Err]
  [KeyEncKey SessionKey < KeyData ]
  [MLK-SecretK ECDHK-SecretK < PriKey]
  [Data&Err < DataL]
  [ECDHK-PublicK ECDHK-Cipher ECDHK-ShareS MLK-PublicK MLK-Cipher MLK-ShareS KeyData Prin RawMsg MLDSA-PublicK MLDSA-PrivateK EdDSA-PublicK EdDSA-PrivateK PriKey PriKeyTime < Data]

  -- concatenation function
  op _||_ : DataL DataL -> DataL {assoc r-assoc constr}
  op errData : -> ErrData {constr}
  -- membership function
  op _\in_ : DataL DataL -> Bool

  vars D1 D2 : Data
  vars DE DE2 : Data&Err
  vars DL DL2 DL3 : DataL
  var P : Prin
  var EcdhkSecK : ECDHK-SecretK
  var EcdhkPubK : ECDHK-PublicK
  var EcdhkCi : ECDHK-Cipher
  var EcdhkSS : ECDHK-ShareS

  var MlkSecK : MLK-SecretK
  var MlkPubK : MLK-PublicK
  var MlkCi : MLK-Cipher
  var MlkSS : MLK-ShareS

  var KEK : KeyEncKey
  var RwM : RawMsg
  var SK : SessionKey
  var KD : KeyData
  var LSK : PriKey
  var LSKT : PriKeyTime

  var MldsaPubK : MLDSA-PublicK
  var MldsaSecK : MLDSA-PrivateK

  var EddsaPubK : EdDSA-PublicK
  var EddsaSecK : EdDSA-PrivateK

  -- Định nghĩa các cấu trúc cơ bản
  eq (errData = D1) = false .
  eq (DE = (DE2 || DL2)) = false .
  eq ((DE || DL) = (DE2 || DL2)) 
      = (DE = DE2 and DL = DL2) .
  eq ((DL || DE) = (DL2 || DE2)) 
      = (DE = DE2 and DL = DL2) .

  eq (DE || DL) \in DE2 = false .
  eq (DE || DL) \in DL2 = (DE \in DL2 and DL \in DL2) .
  eq DE \in DE2 = (DE = DE2) .
  eq DE \in (DE2 || DL2) = (DE = DE2 or DE \in DL2) .

  -- lemmas
  eq DE \in (DL2 || DL3) = DE \in DL2 or DE \in DL3 .
  ceq DL \in (DL2 || DL3) = true if DL \in DL3 .

  op isBasicType : Data&Err -> Bool
  op isNotPriKeyTime : Data&Err -> Bool

  eq isNotPriKeyTime(errData) = false .
  eq isNotPriKeyTime(D1) = (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is RawMsg) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .

  eq isBasicType(errData) = false .
  eq isBasicType(D1) = (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS) or (D1 :is RawMsg) or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .

  ceq (P = D1) = false if (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (LSK = D1) = false if (D1 :is Prin) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (EcdhkPubK = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (EcdhkSS = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (LSKT = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (MlkPubK = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (MlkCi = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (EcdhkCi = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is MLK-Cipher) or (D1 :is KeyData) .
  ceq (MlkSS = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (RwM = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)   or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (MldsaPubK = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (MldsaSecK = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is EdDSA-PublicK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (EddsaPubK = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PrivateK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (EddsaSecK = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is ECDHK-Cipher) or (D1 :is KeyData) .
  ceq (KD = D1) = false if (D1 :is Prin) or (D1 :is PriKey) or (D1 :is ECDHK-PublicK) or (D1 :is ECDHK-ShareS) or (D1 :is PriKeyTime) or (D1 :is MLK-PublicK) or (D1 :is MLK-Cipher) or (D1 :is MLK-ShareS)  or (D1 :is RawMsg)  or (D1 :is MLDSA-PublicK) or (D1 :is MLDSA-PrivateK) or (D1 :is EdDSA-PublicK) or (D1 :is ECDHK-Cipher) or (D1 :is EdDSA-PrivateK) .
}

mod! ENCRYPTION {
  ex(DATA)
  
  --            Data                          Hash
  op h      : DataL                      -> Data {constr}
  op kcombine      : DataL                      -> KeyEncKey {constr}

  -- Ed DSA signature scheme
  op EdDSA-Sign   : EdDSA-PrivateK Data -> Data -- Sign digest
  op EdDSA-Verify : EdDSA-PublicK Data Data -> Bool

  -- ML DSA signature scheme
  op MLDSA-Sign   : MLDSA-PrivateK Data -> Data -- Sign digest
  op MLDSA-Verify : MLDSA-PublicK Data Data -> Bool

  -- Symmetric encryption
  op senc : KeyData DataL -> Data {constr}

  -- Decryption
  op sdec : KeyData Data -> DataL 
  
  -- Variables
  vars A B : Prin 
  vars SIGN SIGN2 D D0 D1 D2 KE KE2 : Data
  vars DL DL2 : DataL
  vars K K2 : Data
  vars KD KD2 : KeyData

  vars EdDSA-SK EdDSA-SK2 : EdDSA-PrivateK
  var EdDSA-PK : EdDSA-PublicK

  vars MLDSA-SK MLDSA-SK2 : MLDSA-PrivateK
  var MLDSA-PK : MLDSA-PublicK

  -- 
  eq sdec(KD, senc(KD,DL)) = DL .
  ceq sdec(KD, senc(KD2,DL)) = errData if not(KD = KD2) .
  ceq sdec(KD, D) = errData if not isCipher(D) .
  eq (sdec(KD, D) = DL2) = (D = senc(KD, DL2)) .
  op isCipher : Data -> Bool 
  ceq isCipher(D) = false if isBasicType(D) .
  eq isCipher(h(DL)) = false .
  eq isCipher(kcombine(DL)) = false .
  eq isCipher(EdDSA-Sign(EdDSA-SK,D)) = false .
  eq isCipher(MLDSA-Sign(MLDSA-SK,D)) = false .
  eq isCipher(senc(KD,DL)) = true .

  eq EdDSA-Verify(eddsa-public(EdDSA-PriK(A)), SIGN, D2) = (SIGN = EdDSA-Sign(EdDSA-PriK(A),D2)) .
  
  eq MLDSA-Verify(mldsa-public(MLDSA-PriK(A)), SIGN, D2) = (SIGN = MLDSA-Sign(MLDSA-PriK(A),D2)) .

  -- equalities
  eq (h(DL) = h(DL2)) = (DL = DL2) .
  eq (kcombine(DL) = kcombine(DL2)) = (DL = DL2) .
  eq (EdDSA-Sign(EdDSA-SK,D1) = EdDSA-Sign(EdDSA-SK2,D2)) = (EdDSA-SK = EdDSA-SK2 and D1 = D2) .
  eq (MLDSA-Sign(MLDSA-SK,D1) = MLDSA-Sign(MLDSA-SK2,D2)) = (MLDSA-SK = MLDSA-SK2 and D1 = D2) .
  eq (senc(KD,DL) = senc(KD2,DL2)) = (KD = KD2 and DL = DL2) .

  ceq (h(DL) = D2)           = false if isBasicType(D2) .
  ceq (kcombine(DL) = D2)           = false if isBasicType(D2) .
  ceq (EdDSA-Sign(EdDSA-SK,D0) = D2) = false if isBasicType(D2) .
  ceq (MLDSA-Sign(MLDSA-SK,D0) = D2) = false if isBasicType(D2) .
  ceq (senc(KD,DL) = D2)        = false if isBasicType(D2) .

  eq (h(DL) = EdDSA-Sign(EdDSA-SK,D1)) = false .
  eq (h(DL) = kcombine(DL)) = false .
  eq (h(DL) = MLDSA-Sign(MLDSA-SK,D2)) = false .
  eq (h(DL) = senc(KD,DL)) = false .

  eq (EdDSA-Sign(EdDSA-SK,D1) = MLDSA-Sign(MLDSA-SK,D2)) = false .
  eq (EdDSA-Sign(EdDSA-SK,D1) = senc(KD,DL)) = false .
  eq (EdDSA-Sign(EdDSA-SK,D1) = senc(KD,DL2)) = false .
  eq (EdDSA-Sign(EdDSA-SK,D1) = kcombine(DL)) = false .

  eq (MLDSA-Sign(MLDSA-SK,D2) = senc(KD,DL)) = false .
  eq (MLDSA-Sign(MLDSA-SK,D2) = kcombine(DL)) = false .
  eq (MLDSA-Sign(MLDSA-SK,D2) = EdDSA-Sign(EdDSA-SK,D1)) = false .
  eq (MLDSA-Sign(MLDSA-SK,D2) = senc(KD,DL2)) = false .

  eq (senc(KD,DL2) = EdDSA-Sign(EdDSA-SK,D1)) = false .
  eq (senc(KD,DL2) = MLDSA-Sign(MLDSA-SK,D1)) = false .
  eq (senc(KD,DL2) = h(DL)) = false .
  eq (senc(KD,DL2) = kcombine(DL)) = false .
}

mod! MESSAGE {
  pr(ENCRYPTION)
  [Msg]
  op msg : Prin Prin Prin DataL Nat -> Msg {constr}
 
  vars A B A2 B2 A' A2' : Prin 
  vars D D2 : DataL 
  vars N N2 : Nat 

  eq (msg(A',A,B,D,N) = msg(A2',A2,B2,D2,N2)) =
    (A' = A2' and A = A2 and B = B2 and D = D2 and N = N2) .
}

mod! SET (D :: TRIV) {
  [Elt.D < Set]
  op empty : -> Set {constr}
  op __ : Set Set -> Set {assoc constr comm idem id: empty}
  op _\in_ : Elt.D Set -> Bool
  var S : Set
  vars E1 E2 : Elt.D
  eq E1 \in empty = false .
  eq E1 \in E2 = (E1 = E2) .
  eq E1 \in (E2 S) = (E1 = E2) or (E1 \in S) .
}

mod! BAG (D :: TRIV) {
  [Elt.D < Bag]
  op void : -> Bag {constr}
  op _,_ : Bag Bag -> Bag {assoc constr comm id: void}
  op _\in_ : Elt.D Bag -> Bool
  var B : Bag
  vars E1 E2 : Elt.D
  eq E1 \in void = false .
  eq E1 \in E2 = (E1 = E2) .
  eq E1 \in (E2,B) = (E1 = E2) or (E1 \in B) .
}

view TRIV2MESSAGE from TRIV to MESSAGE {
  sort Elt -> Msg
}
mod! NETWORK {
  pr(BAG(D <= TRIV2MESSAGE)*{sort Bag -> Network})
}
view TRIV2DATA from TRIV to DATA {
  sort Elt -> Data
}

mod* PQOPENPGP {
  pr(NETWORK)
  pr(SET(D <= TRIV2DATA)*{sort Set -> SecretKS})

  [Sys]
  -- initial states and transitions
  op init : -> Sys {constr}

  -- transitions
  -- send from A to B with message C1 || C2
  op send : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK -> Sys {constr}

  -- observers
  op nw : Sys -> Network
  op time : Sys -> Nat
  op usecret : Sys -> SecretKS
  op leakscr : Sys -> SecretKS
  op knl : Sys -> DataL

  var S : Sys
  vars M M2 : RawMsg
  vars K K2 : SessionKey
  vars A B A2 B2 : Prin
  vars N N2 : Nat
  vars LSKT : PriKeyTime
  var LSKTS : SecretKS
  vars LSK LSK2 : PriKey

  vars Mlk-SK Mlk-SK2 : MLK-SecretK
  vars Mlk-PK Mlk-PK2 : MLK-PublicK 
  vars Mlk-Ci : MLK-Cipher 

  vars Ecdhk-SK Ecdhk-SK2 : ECDHK-SecretK
  vars Ecdhk-PK Ecdhk-PK2 : ECDHK-PublicK 
  vars Ecdhk-Ci : ECDHK-Cipher 

  vars Eddsa-PK : EdDSA-PublicK 
  vars Mldsa-PK : MLDSA-PublicK 

  vars Eddsa-SK : EdDSA-PrivateK 
  vars Mldsa-SK : MLDSA-PrivateK 

  vars DL : DataL
  vars KC C2 D D1 D2 D3 : Data
  vars KD : KeyData

  -- auxiliary operators
  op _\in'_ : PriKey SecretKS -> Bool .
  op timeLeak : PriKey SecretKS -> Nat .
  eq LSK \in' empty = false .
  eq LSK \in' (LSKT LSKTS) = 
    (LSK = priK(LSKT)) or (LSK \in' LSKTS) .
  ceq LSK \in' (D LSKTS) = (LSK \in' LSKTS)
    if isNotPriKeyTime(D) .
  eq timeLeak(LSK, empty) = 0 .
  eq timeLeak(LSK, (LSKT LSKTS)) = 
    (if (LSK = priK(LSKT))
     then time(LSKT)
     else timeLeak(LSK, LSKTS)
     fi) .
  ceq timeLeak(LSK, (D LSKTS)) = timeLeak(LSK, LSKTS)
    if isNotPriKeyTime(D) .

  -- initial states
  eq nw(init) = void .
  eq time(init) = 0 .
  eq usecret(init) = empty .
  eq leakscr(init) = empty .
  eq knl(init) = (MLDSA-PriK(intru) || MLDSA-PubK(intru) || EdDSA-PriK(intru) || EdDSA-PubK(intru) || MLK-PubK(intru) || MLK-PriK(intru) || ECDHK-PubK(intru) || ECDHK-PriK(intru)) . 
  
  -- *************************** START: SEND2 *************************** --
  -- Notion: 
            -- send C1 || C2
              -- C1 = ECDH Cipher || MLK Cipher || KC 
                  -- KC = senc(kcombine(MLK ss || ECDH ss || ECDH c || ecdh PK || MLK c || mlk PK),K)
              -- C2 = senc(k,EdDSA Sign || ML DSA Sign || M)

  op c-send : Sys Prin Prin ECDHK-SecretK MLK-SecretK SessionKey -> Bool .
  eq c-send(S,A,B,Ecdhk-SK2,Mlk-SK2,K) = 
    (not(Ecdhk-SK2 \in usecret(S)) and not(Mlk-SK2 \in usecret(S)) and not(K \in usecret(S))) .

  op KEK : Prin MLK-SecretK ECDHK-SecretK  -> KeyEncKey .
  eq KEK(B,Mlk-SK2,Ecdhk-SK2) = kcombine(mlk-encapsK(MLK-PubK(B),Mlk-SK2) || ecdhk-encapsK(ECDHK-PubK(B),Ecdhk-SK2) || ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || ECDHK-PubK(B) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || MLK-PubK(B)) .

  op SIGN : Prin RawMsg -> DataL .
  eq SIGN(A,M) = EdDSA-Sign(EdDSA-PriK(A),h(M)) || MLDSA-Sign(MLDSA-PriK(A),h(M)) || M .

  op C1 : Prin MLK-SecretK ECDHK-SecretK SessionKey -> Data .
  eq C1(B,Mlk-SK2,Ecdhk-SK2,K) = (ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || senc(KEK(B,Mlk-SK2,Ecdhk-SK2),K)) .

  op C2 : Prin RawMsg SessionKey -> Data .
  eq C2(A,M,K) = senc(K,SIGN(A,M)) .

  ceq nw(send(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = (msg(A,A,B, C1(B,Mlk-SK2,Ecdhk-SK2,K) || C2(A,M,K), time(S)) , nw(S)) if c-send(S,A,B,Ecdhk-SK2,Mlk-SK2,K) .

  ceq usecret(send(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = (K Ecdhk-SK2 Mlk-SK2 usecret(S)) if c-send(S,A,B,Ecdhk-SK2,Mlk-SK2,K) .
  ceq time(send(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = s(time(S)) if c-send(S,A,B,Ecdhk-SK2,Mlk-SK2,K) .
  eq leakscr(send(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = leakscr(S) .
  ceq knl(send(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = (C1(B,Mlk-SK2,Ecdhk-SK2,K) || C2(A,M,K) || knl(S)) if c-send(S,A,B,Ecdhk-SK2,Mlk-SK2,K) .
  ceq send(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2) = S if not c-send(S,A,B,Ecdhk-SK2,Mlk-SK2,K) .

  -- intruder capabilities

  -- randomly selecting a ML-KEM secret key and a ECDH-KEM secret key by themself
  op intruRandMLKEMSecret : Sys MLK-SecretK -> Sys {constr}
  op c-intruRandMLKEMSecret : Sys MLK-SecretK -> Bool
  eq c-intruRandMLKEMSecret(S,Mlk-SK) = not(Mlk-SK \in usecret(S)) .
  eq nw(intruRandMLKEMSecret(S,Mlk-SK)) = nw(S) .
      eq time(intruRandMLKEMSecret(S,Mlk-SK)) = time(S) .
  ceq usecret(intruRandMLKEMSecret(S,Mlk-SK)) = (Mlk-SK usecret(S))
    if c-intruRandMLKEMSecret(S,Mlk-SK) .
  eq leakscr(intruRandMLKEMSecret(S,Mlk-SK)) = leakscr(S) .
  ceq knl(intruRandMLKEMSecret(S,Mlk-SK)) = (Mlk-SK || mlk-keygen(Mlk-SK) || knl(S))
    if c-intruRandMLKEMSecret(S,Mlk-SK) .
  ceq intruRandMLKEMSecret(S,Mlk-SK) = S 
    if not c-intruRandMLKEMSecret(S,Mlk-SK) .

  op intruRandECDHKEMSecret : Sys ECDHK-SecretK -> Sys {constr}
  op c-intruRandECDHKEMSecret : Sys ECDHK-SecretK -> Bool
  eq c-intruRandECDHKEMSecret(S,Ecdhk-SK) = not (Ecdhk-SK \in usecret(S)) .
  eq nw(intruRandECDHKEMSecret(S,Ecdhk-SK)) = nw(S) .
  eq time(intruRandECDHKEMSecret(S,Ecdhk-SK)) = time(S) .
  ceq usecret(intruRandECDHKEMSecret(S,Ecdhk-SK)) = (Ecdhk-SK usecret(S))
    if c-intruRandECDHKEMSecret(S,Ecdhk-SK) .
  eq leakscr(intruRandECDHKEMSecret(S,Ecdhk-SK)) = leakscr(S) .
  ceq knl(intruRandECDHKEMSecret(S,Ecdhk-SK)) = (Ecdhk-SK || ecdhk-keygen(Ecdhk-SK) || knl(S))
    if c-intruRandECDHKEMSecret(S,Ecdhk-SK) .
  ceq intruRandECDHKEMSecret(S,Ecdhk-SK) = S 
    if not c-intruRandECDHKEMSecret(S,Ecdhk-SK) .
  
  -- randomly selecting a session key
  op intruRandSessionKey : Sys SessionKey -> Sys {constr}
  op c-intruRandSessionKey : Sys SessionKey -> Bool
  eq c-intruRandSessionKey(S,K) = not (K \in usecret(S)) .
  eq nw(intruRandSessionKey(S,K)) = nw(S) .
  eq time(intruRandSessionKey(S,K)) = time(S) .
  ceq usecret(intruRandSessionKey(S,K)) = (K usecret(S))
    if c-intruRandSessionKey(S,K) .
  eq leakscr(intruRandSessionKey(S,K)) = leakscr(S) .
  ceq knl(intruRandSessionKey(S,K)) = (K || knl(S))
    if c-intruRandSessionKey(S,K) .
  ceq intruRandSessionKey(S,K) = S 
    if not c-intruRandSessionKey(S,K) .
  
  -- randomly selecting a message
  op intruRandMessage : Sys RawMsg -> Sys {constr}
  op c-intruRandMessage : Sys RawMsg -> Bool
  eq c-intruRandMessage(S,M) = not(M \in knl(S)) .
  eq nw(intruRandMessage(S,M)) = nw(S) .
  eq time(intruRandMessage(S,M)) = time(S) .
  eq usecret(intruRandMessage(S,M)) = usecret(S) .
  eq leakscr(intruRandMessage(S,M)) = leakscr(S) .
  ceq knl(intruRandMessage(S,M)) = (M || knl(S))
    if c-intruRandMessage(S,M) .
  ceq intruRandMessage(S,M) = S 
    if not c-intruRandMessage(S,M) .
  
  -- computing a KEM shared secret, KEM ciphertext
  op intruCalcMLKEMInfo : Sys MLK-SecretK MLK-PublicK -> Sys {constr}
  op c-intruCalcMLKEMInfo : Sys MLK-SecretK MLK-PublicK -> Bool
  eq c-intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK) = (Mlk-SK \in knl(S) and Mlk-PK \in knl(S)) .
  eq nw(intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK)) = nw(S) . 
  eq time(intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK)) = time(S) .
  eq usecret(intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK)) = usecret(S) . 
  eq leakscr(intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK)) = leakscr(S) . 
  ceq knl(intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK)) = 
      (mlk-encapsK(Mlk-PK,Mlk-SK) || mlk-encapsC(Mlk-PK,Mlk-SK) || knl(S)) 
    if c-intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK) . 
  ceq intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK) = S 
    if not c-intruCalcMLKEMInfo(S,Mlk-SK,Mlk-PK) .
  
  op intruCalcECDHKEMInfo : Sys ECDHK-SecretK ECDHK-PublicK -> Sys {constr}
  op c-intruCalcECDHKEMInfo : Sys ECDHK-SecretK ECDHK-PublicK -> Bool
  eq c-intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK) = (Ecdhk-SK \in knl(S) and Ecdhk-PK \in knl(S)) .
  eq nw(intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK)) = nw(S) . 
  eq time(intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK)) = time(S) .
  eq usecret(intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK)) = usecret(S) . 
  eq leakscr(intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK)) = leakscr(S) . 
  ceq knl(intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK)) = 
      (ecdhk-encapsK(Ecdhk-PK,Ecdhk-SK) || ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK) || knl(S)) 
    if c-intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK) . 
  ceq intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK) = S 
    if not c-intruCalcECDHKEMInfo(S,Ecdhk-SK,Ecdhk-PK) .
  
  -- performing Encaps
  op intruMLKEncaps : Sys MLK-SecretK MLK-PublicK  -> Sys {constr}
  op c-intruMLKEncaps : Sys MLK-SecretK MLK-PublicK -> Bool
  eq c-intruMLKEncaps(S,Mlk-SK,Mlk-PK) = (Mlk-SK \in knl(S) and Mlk-PK \in knl(S)) .
  eq nw(intruMLKEncaps(S,Mlk-SK,Mlk-PK)) = nw(S) . 
  eq time(intruMLKEncaps(S,Mlk-SK,Mlk-PK)) = time(S) .
  eq usecret(intruMLKEncaps(S,Mlk-SK,Mlk-PK)) = usecret(S) . 
  eq leakscr(intruMLKEncaps(S,Mlk-SK,Mlk-PK)) = leakscr(S) . 
  ceq knl(intruMLKEncaps(S,Mlk-SK,Mlk-PK)) = 
      (mlk-encapsK(Mlk-PK,Mlk-SK) || mlk-encapsC(Mlk-PK,Mlk-SK) || knl(S))
    if c-intruMLKEncaps(S,Mlk-SK,Mlk-PK) . 
  ceq intruMLKEncaps(S,Mlk-SK,Mlk-PK) = S 
    if not c-intruMLKEncaps(S,Mlk-SK,Mlk-PK) .

  op intruECDHKencaps : Sys ECDHK-SecretK ECDHK-PublicK  -> Sys {constr}
  op c-intruECDHKencaps : Sys ECDHK-SecretK ECDHK-PublicK -> Bool
  eq c-intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK) = (Ecdhk-SK \in knl(S) and Ecdhk-PK \in knl(S)) .
  eq nw(intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK)) = nw(S) . 
  eq time(intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK)) = time(S) .
  eq usecret(intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK)) = usecret(S) . 
  eq leakscr(intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK)) = leakscr(S) . 
  ceq knl(intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK)) = 
      (ecdhk-encapsK(Ecdhk-PK,Ecdhk-SK) || ecdhk-encapsC(Ecdhk-PK,Ecdhk-SK) || knl(S))
    if c-intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK) . 
  ceq intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK) = S 
    if not c-intruECDHKencaps(S,Ecdhk-SK,Ecdhk-PK) .

  -- performing Decaps
  op intruMLKDecaps : Sys MLK-SecretK MLK-Cipher  -> Sys {constr}
  op c-intruMLKDecaps : Sys MLK-SecretK MLK-Cipher -> Bool
  eq c-intruMLKDecaps(S,Mlk-SK,Mlk-Ci) = (Mlk-SK \in knl(S) and Mlk-Ci \in knl(S)) .
  eq nw(intruMLKDecaps(S,Mlk-SK,Mlk-Ci)) = nw(S) . 
  eq time(intruMLKDecaps(S,Mlk-SK,Mlk-Ci)) = time(S) .
  eq usecret(intruMLKDecaps(S,Mlk-SK,Mlk-Ci)) = usecret(S) . 
  eq leakscr(intruMLKDecaps(S,Mlk-SK,Mlk-Ci)) = leakscr(S) . 
  ceq knl(intruMLKDecaps(S,Mlk-SK,Mlk-Ci)) = 
      (mlk-decaps(Mlk-Ci,Mlk-SK) || knl(S)) 
    if c-intruMLKDecaps(S,Mlk-SK,Mlk-Ci) . 
  ceq intruMLKDecaps(S,Mlk-SK,Mlk-Ci) = S 
    if not c-intruMLKDecaps(S,Mlk-SK,Mlk-Ci) .
  
  op intruECDHKDecaps : Sys ECDHK-SecretK ECDHK-Cipher  -> Sys {constr}
  op c-intruECDHKDecaps : Sys ECDHK-SecretK ECDHK-Cipher -> Bool
  eq c-intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci) = (Ecdhk-SK \in knl(S) and Ecdhk-Ci \in knl(S)) .
  eq nw(intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci)) = nw(S) . 
  eq time(intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci)) = time(S) .
  eq usecret(intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci)) = usecret(S) . 
  eq leakscr(intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci)) = leakscr(S) . 
  ceq knl(intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci)) = 
      (ecdhk-decaps(Ecdhk-Ci,Ecdhk-SK) || knl(S)) 
    if c-intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci) . 
  ceq intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci) = S 
    if not c-intruECDHKDecaps(S,Ecdhk-SK,Ecdhk-Ci) .
  
  -- use any cryptographic primitive function - KEK like SHA3-256 and hash
  op intruPrimCrypto : Sys DataL -> Sys {constr}
  op c-intruPrimCrypto : Sys DataL -> Bool
  eq c-intruPrimCrypto(S,DL) = DL \in knl(S) .
  eq nw(intruPrimCrypto(S,DL)) = nw(S) .
  eq time(intruPrimCrypto(S,DL)) = time(S) .
  eq usecret(intruPrimCrypto(S,DL)) = usecret(S) .
  eq leakscr(intruPrimCrypto(S,DL)) = leakscr(S) .
  ceq knl(intruPrimCrypto(S,DL)) = (kcombine(DL) || h(DL) || knl(S)) 
    if c-intruPrimCrypto(S,DL) .
  ceq intruPrimCrypto(S,DL) = S if not c-intruPrimCrypto(S,DL) .

    -- Intruder capabilities for signatures
  op intruSign1 : Sys EdDSA-PrivateK Data -> Sys {constr}
  op c-intruSign1 : Sys EdDSA-PrivateK Data -> Bool
  eq c-intruSign1(S,Eddsa-SK,D2) = (Eddsa-SK \in knl(S) and D2 \in knl(S)) .
  eq nw(intruSign1(S,Eddsa-SK,D2)) = nw(S) .
  eq time(intruSign1(S,Eddsa-SK,D2)) = time(S) .
  eq usecret(intruSign1(S,Eddsa-SK,D2)) = usecret(S) .
  eq leakscr(intruSign1(S,Eddsa-SK,D2)) = leakscr(S) .
  ceq knl(intruSign1(S,Eddsa-SK,D2)) = (EdDSA-Sign(Eddsa-SK,D2) || knl(S)) 
    if c-intruSign1(S,Eddsa-SK,D2) .
  ceq intruSign1(S,Eddsa-SK,D2) = S if not c-intruSign1(S,Eddsa-SK,D2) .

  op intruSign2 : Sys MLDSA-PrivateK Data -> Sys {constr}
  op c-intruSign2 : Sys MLDSA-PrivateK Data -> Bool
  eq c-intruSign2(S,Mldsa-SK,D2) = (Mldsa-SK \in knl(S) and D2 \in knl(S)) .
  eq nw(intruSign2(S,Mldsa-SK,D2)) = nw(S) .
  eq time(intruSign2(S,Mldsa-SK,D2)) = time(S) .
  eq usecret(intruSign2(S,Mldsa-SK,D2)) = usecret(S) .
  eq leakscr(intruSign2(S,Mldsa-SK,D2)) = leakscr(S) .
  ceq knl(intruSign2(S,Mldsa-SK,D2)) = (MLDSA-Sign(Mldsa-SK,D2) || knl(S)) 
    if c-intruSign2(S,Mldsa-SK,D2) .
  ceq intruSign2(S,Mldsa-SK,D2) = S if not c-intruSign2(S,Mldsa-SK,D2) .

  -- Intruder capabilities for symmetric encryption/decryption
  op intruSymCrypto1 : Sys KeyData DataL -> Sys {constr}
  op c-intruSymCrypto1 : Sys KeyData DataL -> Bool
  eq c-intruSymCrypto1(S,KD,DL) = KD \in knl(S) and DL \in knl(S) .
  eq nw(intruSymCrypto1(S,KD,DL)) = nw(S) .
  eq time(intruSymCrypto1(S,KD,DL)) = time(S) .
  eq usecret(intruSymCrypto1(S,KD,DL)) = usecret(S) .
  eq leakscr(intruSymCrypto1(S,KD,DL)) = leakscr(S) .
  ceq knl(intruSymCrypto1(S,KD,DL)) = (senc(KD,DL) || knl(S)) 
    if c-intruSymCrypto1(S,KD,DL) .
  ceq intruSymCrypto1(S,KD,DL) = S if not c-intruSymCrypto1(S,KD,DL) .

  -- compromise of shared secrets
  op intruComKEMSS : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK -> Sys {constr}
  op c-intruComKEMSS : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK -> Bool
  eq c-intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2) = 
    msg(A,A,B, (ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || senc(kcombine(mlk-encapsK(MLK-PubK(B),Mlk-SK2) || ecdhk-encapsK(ECDHK-PubK(B),Ecdhk-SK2) || ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || ECDHK-PubK(B) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || MLK-PubK(B)),K)) || (senc(K,EdDSA-Sign(EdDSA-PriK(A),h(M)) || MLDSA-Sign(MLDSA-PriK(A),h(M)) || M)), time(S)) \in nw(S) .
  eq nw(intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = nw(S) .
  eq time(intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = s(time(S)) .
  eq usecret(intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = usecret(S) .
  ceq leakscr(intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = 
      ((MLK-PriK(B) & Mlk-SK2) (ECDHK-PriK(B) & Ecdhk-SK2) leakscr(S)) 
    if c-intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2) .
  ceq knl(intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = 
      ((MLK-PriK(B) & Mlk-SK2) || (ECDHK-PriK(B) & Ecdhk-SK2) || knl(S))
    if c-intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2) .
  ceq intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2) = S
    if not c-intruComKEMSS(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2) .
  
  -- compromise of KEM secrets
  op intruComKEM : Sys Prin Prin ECDHK-SecretK MLK-SecretK Data Data -> Sys {constr}
  op c-intruComKEM : Sys Prin Prin ECDHK-SecretK MLK-SecretK Data Data -> Bool
  eq c-intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2) = 
    msg(A,A,B, ((ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || KC) || C2), time(S)) \in nw(S) .
  eq nw(intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2)) = nw(S) . 
  eq time(intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2)) = s(time(S)) .
  eq usecret(intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2)) = usecret(S) .
  ceq leakscr(intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2)) = (Ecdhk-SK2 Mlk-SK2 leakscr(S)) 
    if c-intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2) . 
  ceq knl(intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2)) = (Ecdhk-SK2 || Mlk-SK2 || knl(S)) 
    if c-intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2) . 
  ceq intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2) = S 
    if not c-intruComKEM(S,A,B,Ecdhk-SK2,Mlk-SK2,KC,C2) .
  
  -- compromise of a session key
  op intruComSessionKey : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK -> Sys {constr}
  op c-intruComSessionKey : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK -> Bool
  eq c-intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2) = 
    msg(A2,A,B, (C1(B,Mlk-SK2,Ecdhk-SK2,K) || C2(A,M,K)), time(S)) \in nw(S) .
  eq nw(intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = nw(S) . 
  eq time(intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = s(time(S)) .
  eq usecret(intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = usecret(S) .
  ceq leakscr(intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = (K leakscr(S)) 
    if c-intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2) . 
  ceq knl(intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2)) = (K || knl(S)) 
    if c-intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2) . 
  ceq intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2) = S 
    if not c-intruComSessionKey(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2) .

-- compromise of long-term signature private key of servers 
  op intruComSignLt : Sys Prin -> Sys {constr}
  op c-intruComSignLt : Sys Prin -> Bool
  eq c-intruComSignLt(S,A) = not(EdDSA-PriK(A) \in leakscr(S)) and not(MLDSA-PriK(A) \in leakscr(S)) .
  eq nw(intruComSignLt(S,A)) = nw(S) . 
  eq time(intruComSignLt(S,A)) = time(S) .
  eq usecret(intruComSignLt(S,A)) = usecret(S) . 
  ceq leakscr(intruComSignLt(S,A)) = 
      (EdDSA-PriK(A) MLDSA-PriK(A) leakscr(S)) 
    if c-intruComSignLt(S,A) . 
  ceq knl(intruComSignLt(S,A)) = (EdDSA-PriK(A) || MLDSA-PriK(A) || knl(S)) 
    if c-intruComSignLt(S,A) . 
  ceq intruComSignLt(S,A) = S if not c-intruComSignLt(S,A) .

  -- compromise of long-term KEM private key of servers
  op intruComKEMLt : Sys Prin -> Sys {constr}
  op c-intruComKEMLt : Sys Prin -> Bool
  eq c-intruComKEMLt(S,A) = not(ECDHK-PriK(A) \in leakscr(S)) and not(MLK-PriK(A) \in leakscr(S)) .
  eq nw(intruComKEMLt(S,A)) = nw(S) . 
  eq time(intruComKEMLt(S,A)) = time(S) .
  eq usecret(intruComKEMLt(S,A)) = usecret(S) . 
  ceq leakscr(intruComKEMLt(S,A)) = 
      (ECDHK-PriK(A) MLK-PriK(A) leakscr(S)) 
    if c-intruComKEMLt(S,A) . 
  ceq knl(intruComKEMLt(S,A)) = (ECDHK-PriK(A) || MLK-PriK(A) || knl(S)) 
    if c-intruComKEMLt(S,A) . 
  ceq intruComKEMLt(S,A) = S if not c-intruComKEMLt(S,A) .

  op fkMsg : Sys Prin Prin ECDHK-Cipher MLK-Cipher Data Data -> Sys {constr}
  op c-fkMsg : Sys Prin Prin ECDHK-Cipher MLK-Cipher Data Data -> Bool
  eq c-fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2) = 
    (Ecdhk-Ci \in knl(S) and
     Mlk-Ci \in knl(S) and
     KC \in knl(S) and
     C2 \in knl(S)) .
  ceq nw(fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2)) = 
      (msg(intru,A,B, (Ecdhk-Ci || Mlk-Ci || KC || C2), time(S)) , nw(S))
    if c-fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2) .
  eq usecret(fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2)) = usecret(S) .
  eq time(fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2)) = s(time(S)) .
  eq leakscr(fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2)) = leakscr(S) .
  eq knl(fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2)) = knl(S) .
  ceq fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2) = S 
    if not c-fkMsg(S,A,B,Ecdhk-Ci,Mlk-Ci,KC,C2) .
  
  -- know all publicity information
  op intruGetPubInfo : Sys Prin -> Sys {constr}
  eq nw(intruGetPubInfo(S,B)) = nw(S) .
  eq usecret(intruGetPubInfo(S,B)) = usecret(S) .
  eq time(intruGetPubInfo(S,B)) = time(S) .
  eq leakscr(intruGetPubInfo(S,B)) = leakscr(S) .
  eq knl(intruGetPubInfo(S,B)) = 
    (B || knl(S)) .

  -- break ECDH, derive private keys from public keys
  op intruBreakECDH : Sys ECDHK-PublicK -> Sys {constr}
  op c-intruBreakECDH : Sys ECDHK-PublicK -> Bool
  eq c-intruBreakECDH(S,Ecdhk-PK) = 
    (Ecdhk-PK \in knl(S)) .
  eq nw(intruBreakECDH(S,Ecdhk-PK)) = nw(S) .
  eq time(intruBreakECDH(S,Ecdhk-PK)) = time(S) .
  eq usecret(intruBreakECDH(S,Ecdhk-PK)) = usecret(S) .
  eq leakscr(intruBreakECDH(S,Ecdhk-PK)) = leakscr(S) .
  ceq knl(intruBreakECDH(S,Ecdhk-PK)) = (ecdhk-getSecret(Ecdhk-PK) || knl(S)) 
    if c-intruBreakECDH(S,Ecdhk-PK) .
  ceq intruBreakECDH(S,Ecdhk-PK) = S 
    if not c-intruBreakECDH(S,Ecdhk-PK) .

  -- break EdDSA, from public key to private key, and then sign everything  
  op intruBreakEdDSA : Sys EdDSA-PublicK -> Sys {constr}
  op c-intruBreakEdDSA : Sys EdDSA-PublicK -> Bool
  eq c-intruBreakEdDSA(S,Eddsa-PK) = 
    (Eddsa-PK \in knl(S)) .
  eq nw(intruBreakEdDSA(S,Eddsa-PK)) = nw(S) .
  eq time(intruBreakEdDSA(S,Eddsa-PK)) = time(S) .
  eq usecret(intruBreakEdDSA(S,Eddsa-PK)) = usecret(S) .
  eq leakscr(intruBreakEdDSA(S,Eddsa-PK)) = leakscr(S) .
  ceq knl(intruBreakEdDSA(S,Eddsa-PK)) = (eddsa-getPrivate(Eddsa-PK) || knl(S)) 
    if c-intruBreakEdDSA(S,Eddsa-PK) .
  ceq intruBreakEdDSA(S,Eddsa-PK) = S 
    if not c-intruBreakEdDSA(S,Eddsa-PK) .
}