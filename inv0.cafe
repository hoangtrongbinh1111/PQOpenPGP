in invariants.cafe
-- base case
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  red inv0(init,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
-- induction case
-- fkMsgInit
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-PublicK .
  ops r4 : -> MLK-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = true .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgInit(s,r1,r2,r3,r4),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-PublicK .
  ops r4 : -> MLK-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgInit(s,r1,r2,r3,r4),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-PublicK .
  ops r4 : -> MLK-PublicK .

  eq (r3 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgInit(s,r1,r2,r3,r4),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
-- fkMsgReply
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = true .
  eq (r5 \in knl(s)) = true .
  eq (r6 \in knl(s)) = true .
  eq (r7 \in knl(s)) = true .
  eq (r8 \in knl(s)) = true .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = true .
  eq (r5 \in knl(s)) = true .
  eq (r6 \in knl(s)) = true .
  eq (r7 \in knl(s)) = true .
  eq (r8 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close

open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = true .
  eq (r5 \in knl(s)) = true .
  eq (r6 \in knl(s)) = true .
  eq (r7 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = true .
  eq (r5 \in knl(s)) = true .
  eq (r6 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = true .
  eq (r5 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = true .
  eq (r4 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close
open INV .
  ops s : -> Sys .
  ops a b : -> Prin .
  ops m : -> RawMsg .
  ops k : -> SessionKey .

  ops eSK eSK2 : -> ECDHK-SecretK .
  ops mSK mSK2 : -> MLK-SecretK .

  ops edSK : -> EdDSA-PrivateK .
  ops mlSK : -> MLDSA-PrivateK .

  ops kc : -> Data .

  eq kc = senc(kcombine(mlk-encapsK(mlk-keygen(mSK),mSK2),ecdhk-encapsK(ecdhk-keygen(eSK),eSK2),mlk-encapsC(mlk-keygen(mSK),mSK2),ecdhk-encapsC(ecdhk-keygen(eSK),eSK2),mlk-keygen(mSK),ecdhk-keygen(eSK)),k) .

  ops r1 r2 : -> Prin .
  ops r3 : -> ECDHK-Cipher .
  ops r4 : -> MLK-Cipher .
  ops r5 r6 : -> Data .
  ops r7 : -> EdDSA-PublicK .
  ops r8 : -> MLDSA-PublicK .

  eq (r3 \in knl(s)) = false .

  red inv0(s,a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) implies inv0(fkMsgReply(s,r1,r2,r3,r4,r5,r6,r7,r8),a,b,m,k,eSK,mSK,eSK2,mSK2,edSK,mlSK,kc) .
close