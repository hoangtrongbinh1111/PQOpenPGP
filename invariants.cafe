in c.cafe 

mod INV {
  pr(PQOPENPGP)
  var S : Sys
  vars M M2 : RawMsg
  vars K K2 : SessionKey
  vars A B A2 B2 : Prin

  vars Mlk-SK Mlk-SK2 : MLK-SecretK
  vars Mlk-PK : MLK-PublicK 
  vars Mlk-Ci : MLK-Cipher 

  vars Ecdhk-SK Ecdhk-SK2 : ECDHK-SecretK
  vars Ecdhk-PK : ECDHK-PublicK 
  vars Ecdhk-Ci : ECDHK-Cipher 

  vars Eddsa-PK : EdDSA-PublicK 
  vars Mldsa-PK : MLDSA-PublicK 
  vars Eddsa-SK : EdDSA-PrivateK 
  vars Mldsa-SK : MLDSA-PrivateK 

  vars DL : DataL

-- checking the protocol execution
  op check : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK ECDHK-SecretK MLK-SecretK EdDSA-PublicK MLDSA-PublicK EdDSA-PrivateK MLDSA-PrivateK -> Bool .
  eq check(S,A,B,M,K,Ecdhk-SK,Mlk-SK,Ecdhk-SK2,Mlk-SK2,Eddsa-PK,Mldsa-PK,Eddsa-SK,Mldsa-SK) = 
    msg2(B,B,A, ((ecdhk-encapsC(ecdhk-keygen(Ecdhk-SK),Ecdhk-SK2) || mlk-encapsC(mlk-keygen(Mlk-SK),Mlk-SK2) || senc(kcombine(mlk-encapsK(mlk-keygen(Mlk-SK),Mlk-SK2),ecdhk-encapsK(ecdhk-keygen(Ecdhk-SK),Ecdhk-SK2),mlk-encapsC(mlk-keygen(Mlk-SK),Mlk-SK2),ecdhk-encapsC(ecdhk-keygen(Ecdhk-SK),Ecdhk-SK2),mlk-keygen(Mlk-SK),ecdhk-keygen(Ecdhk-SK)),K)) || senc(K,EdDSA-Sign(Eddsa-SK,h(M)) || MLDSA-Sign(Mldsa-SK,h(M)) || M) || Eddsa-PK || Mldsa-PK)) \in nw(S) .
    
    -- and sdec(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),senc(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),K)) = K and ecVerify(esPubK(A),ecSign(esPriK(A),h(M)),h(M)) and diVerify(diPubK(A),diSign(diPriK(A),h(M)),h(M))) .

    

  -- key secrecy
  -- op keySe : Sys Prin Prin RawMsg SessionKey EcSecretK KbSecretK -> Bool .
  -- eq keySe(S,A,B,M,K,EcSK1,KbSK1) = 
  -- (not(A = intru or B = intru) and
  --   msg1(A,A,B, (ecPublic(EcSK1) || encapsC(kyberPubK(B),KbSK1) || senc(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),K) || senc(K,ecSign(esPriK(A),h(M)) || diSign(diPriK(A),h(M)) || M))) \in nw(S))
  --  implies not (K \in knl(S)) .
  
  -- -- secrecy of messages
  -- op seMess : Sys Prin Prin Prin KbCipher Data Data Data Data RawMsg SessionKey EcSecretK KbSecretK -> Bool .
  -- eq seMess(S,A2,A,B,KbC1,KC,C2,SIGN1,SIGN2,M,K,EcSK2,KbSK2) = (
  --   not(A = intru or B = intru) and
  --   msg1(A2,A,B, (ecdhPubK(A) || KbC1 || KC || C2)) \in nw(S) and 
  --   sdec(kcombine(ecShare(ecdhPubK(A),EcSK2),ecdhPubK(A),decaps(KbC1,KbSK2),KbC1),KC) = K and
  --   sdec(K,C2) = (SIGN1 || SIGN2 || M) and
  --   ecVerify(esPubK(A),SIGN1,h(M)) and
  --   diVerify(diPubK(A),SIGN2,h(M))
  --   ) implies not (M \in knl(S)) .

  -- -- authencity of messages
  -- op authenMess : Sys Prin Prin Prin KbPublicK KbSecretK KbCipher Data Data Data Data RawMsg SessionKey EcSecretK KbSecretK -> Bool .
  -- eq authenMess(S,A2,A,B,KbPK1,KbSK3,KbC2,KC,C2,SIGN1,SIGN2,M,K,EcSK2,KbSK2) = (
  --   not(A = intru or B = intru) and
  --   encapsC(KbPK1,KbSK3) = KbC2 and
  --   ((ecdhPubK(A) || KbC2) \in knl(S)) and
  --   sdec(kcombine(ecShare(ecdhPubK(A),EcSK2),ecdhPubK(A),decaps(KbC2,KbSK2),KbC2),KC) = K and
  --   sdec(K,C2) = (SIGN1 || SIGN2 || M) and
  --   ecVerify(esPubK(A),SIGN1,h(M)) and
  --   diVerify(diPubK(A),SIGN2,h(M))
  --   )
  --   implies not (msg1(A2,A,B, (ecdhPubK(A) || encapsC(KbPK1,KbSK3) || KC || C2)) \in nw(S)) .
}
