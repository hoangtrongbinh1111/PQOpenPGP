in b.cafe 

mod INV {
  pr(PQOPENPGP)
  vars S : Sys
  var M : RawMsg
  var K : SessionKey
  vars A B A2 B2 : Prin
  vars KbSK1 KbSK2 KbSK3 : KbSecret -- kyber private key
  vars KbPK1 KbPK2 : KbPublic -- kyber public key
  vars KbC1 KbC2 : KbCipher
  vars KC KC2 SIGN1 SIGN2 C2 : Data

  vars EcSK1 EcSK2 : EcSecretK -- ecdh private key
  vars EcPK1 : EcPublicK -- ecdh public key

-- checking the protocol execution
  -- op check : Sys Prin Prin RawMsg SessionKey EcSecretK KbSecret -> Bool .
  -- eq check(S,A,B,M,K,EcSK1,KbSK1) = (
  --   msg1(A,A,B, (ecPublic(EcSK1) || encapsC(kyberPubK(B),KbSK1) || senc(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),K) || senc(K,ecSign(esPriK(A),h(M)) || diSign(diPriK(A),h(M)) || M))) \in nw(S) and sdec(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),senc(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),K)) = K and ecVerify(esPubK(A),ecSign(esPriK(A),h(M)),h(M)) and diVerify(diPubK(A),diSign(diPriK(A),h(M)),h(M))) .

      -- and sdec(kcombine(ecShare(ecdhPubK(A),EcSK2),ecdhPubK(A),decaps(encapsK(kyberPubK(B),KbSK1),KbSK1),encapsC(kyberPubK(B),KbSK1)),senc(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),K)) = K 
    -- and ecVerify(esPubK(A),ecSign(esPriK(A),h(M)),h(M)) 
    -- and diVerify(diPubK(A),diSign(diPriK(A),h(M)),h(M))

  -- key secrecy
  op keySe : Sys Prin Prin RawMsg SessionKey EcSecretK KbSecret -> Bool .
  eq keySe(S,A,B,M,K,EcSK1,KbSK1) = 
  (not(A = intru or B = intru) and
    msg1(A,A,B, (ecPublic(EcSK1) || encapsC(kyberPubK(B),KbSK1) || senc(kcombine(ecShare(ecdhPubK(B),EcSK1),ecPublic(EcSK1),encapsK(kyberPubK(B),KbSK1),encapsC(kyberPubK(B),KbSK1)),K) || senc(K,ecSign(esPriK(A),h(M)) || diSign(diPriK(A),h(M)) || M))) \in nw(S))
   implies not (K \in knl(S)) .
  
  -- secrecy of messages
  op seMess : Sys Prin Prin Prin KbCipher Data Data Data Data RawMsg SessionKey EcSecretK KbSecret -> Bool .
  eq seMess(S,A2,A,B,KbC1,KC,C2,SIGN1,SIGN2,M,K,EcSK2,KbSK2) = (
    not(A = intru or B = intru) and
    msg1(A2,A,B, (ecdhPubK(A) || KbC1 || KC || C2)) \in nw(S) and 
    sdec(kcombine(ecShare(ecdhPubK(A),EcSK2),ecdhPubK(A),decaps(KbC1,KbSK2),KbC1),KC) = K and
    sdec(K,C2) = (SIGN1 || SIGN2 || M) and
    ecVerify(esPubK(A),SIGN1,h(M)) and
    diVerify(diPubK(A),SIGN2,h(M))
    ) implies not (M \in knl(S)) .

  -- authencity of messages
  op authenMess : Sys Prin Prin Prin KbPublic KbSecret KbCipher Data Data Data Data RawMsg SessionKey EcSecretK KbSecret -> Bool .
  eq authenMess(S,A2,A,B,KbPK1,KbSK3,KbC2,KC,C2,SIGN1,SIGN2,M,K,EcSK2,KbSK2) = (
    not(A = intru or B = intru) and
    encapsC(KbPK1,KbSK3) = KbC2 and
    ((ecdhPubK(A) || KbC2) \in knl(S)) and
    sdec(kcombine(ecShare(ecdhPubK(A),EcSK2),ecdhPubK(A),decaps(KbC2,KbSK2),KbC2),KC) = K and
    sdec(K,C2) = (SIGN1 || SIGN2 || M) and
    ecVerify(esPubK(A),SIGN1,h(M)) and
    diVerify(diPubK(A),SIGN2,h(M))
    )
    implies not (msg1(A2,A,B, (ecdhPubK(A) || encapsC(KbPK1,KbSK3) || KC || C2)) \in nw(S)) .
}
