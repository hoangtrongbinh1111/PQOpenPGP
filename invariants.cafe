-- in pq.cafe 

mod INV {
  pr(PQOPENPGP)
  var S : Sys
  vars M M2 : RawMsg
  vars K K2 : SessionKey
  vars A B A2 B2 : Prin

  vars Mlk-SK Mlk-SK2 : MLK-SecretK
  vars Mlk-PK : MLK-PublicK 
  vars Mlk-Ci : MLK-Cipher 

  vars Ecdhk-SK Ecdhk-SK2 : ECDHK-SecretK
  vars Ecdhk-PK : ECDHK-PublicK 
  vars Ecdhk-Ci : ECDHK-Cipher 

  vars Eddsa-PK : EdDSA-PublicK 
  vars Mldsa-PK : MLDSA-PublicK 
  vars Eddsa-SK : EdDSA-PrivateK 
  vars Mldsa-SK : MLDSA-PrivateK 

  vars DL DL2 : DataL
  vars KC D1 D2 D3 : Data

-- checking the protocol execution
-- when A sends to B; using Ecdhk-SK & Mlk-SK
  -- op check : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  -- eq check(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
  --   msg2(A,A,B, (ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || KC) || (senc(K,EdDSA-Sign(EdDSA-PriK(A),h(M)) || MLDSA-Sign(MLDSA-PriK(A),h(M)) || M))) \in nw(S) and
  --   MLDSA-Verify(MLDSA-PubK(A),MLDSA-Sign(mldsa-getPrivate(MLDSA-PubK(A)),h(M)),h(M)) and
  --   EdDSA-Verify(EdDSA-PubK(A),EdDSA-Sign(eddsa-getPrivate(EdDSA-PubK(A)),h(M)),h(M)) and
  --   sdec(kcombine(mlk-decaps(Mlk-Ci,MLK-PriK(B)) || ecdhk-decaps(Ecdhk-Ci,ECDHK-PriK(B)) || Ecdhk-Ci || ECDHK-PubK(B) || Mlk-Ci || MLK-PubK(B)),KC) = K .

  -- -- **************************************************************************************************************************************************************************************************
  -- =====>  KEY SECRECY
  -- op keySe : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  -- eq keySe(S,B2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
  --   (
  --     not(A = intru or B = intru) and
  --     msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
  --       EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
  --       MLDSA-Sign(MLDSA-PriK(A), h(M)) || M)))) \in nw(S) and
  --     MLDSA-Verify(MLDSA-PubK(A), MLDSA-Sign(mldsa-getPrivate(MLDSA-PubK(A)), h(M)), h(M)) and
  --     EdDSA-Verify(EdDSA-PubK(A), EdDSA-Sign(eddsa-getPrivate(EdDSA-PubK(A)), h(M)), h(M)) and
  --     sdec(kcombine(
  --       mlk-decaps(Mlk-Ci, MLK-PriK(B)) || 
  --       ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) || 
  --       Ecdhk-Ci || ECDHK-PubK(B) || 
  --       Mlk-Ci || MLK-PubK(B)), KC) = K and
  --     not (Ecdhk-SK2 \in leakscr(S)) and 
  --     not (Mlk-SK2 \in leakscr(S)) and 
  --     not (mlk-decaps(Mlk-Ci, MLK-PriK(B)) \in leakscr(S)) and 
  --     not (ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) \in leakscr(S)) and
  --     not (ECDHK-PriK(B) \in leakscr(S)) and 
  --     not (MLK-PriK(B) \in leakscr(S))
  --   ) implies 
  --     (not K \in knl(S)) .

  -- op secrecy : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  -- eq secrecy(S,B2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
  --   (
  --     not(A = intru or B = intru) and
  --     msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
  --       EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
  --       MLDSA-Sign(MLDSA-PriK(A), h(M)) || M))) ) \in nw(S) and
  --     MLDSA-Verify(MLDSA-PubK(A), MLDSA-Sign(mldsa-getPrivate(MLDSA-PubK(A)), h(M)), h(M)) and
  --     EdDSA-Verify(EdDSA-PubK(A), EdDSA-Sign(eddsa-getPrivate(EdDSA-PubK(A)), h(M)), h(M)) and
  --     sdec(kcombine(
  --       mlk-decaps(Mlk-Ci, MLK-PriK(B)) || 
  --       ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) || 
  --       Ecdhk-Ci || ECDHK-PubK(B) || 
  --       Mlk-Ci || MLK-PubK(B)), KC) = K and
  --     not (Ecdhk-SK2 \in leakscr(S)) and 
  --     not (Mlk-SK2 \in leakscr(S)) and 
  --     not (mlk-decaps(Mlk-Ci, MLK-PriK(B)) \in leakscr(S)) and 
  --     not (ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) \in leakscr(S)) and
  --     not (ECDHK-PriK(B) \in leakscr(S)) and 
  --     not (MLK-PriK(B) \in leakscr(S))
  --   ) implies 
  --     (not (mlk-decaps(Mlk-Ci, MLK-PriK(B)) \in knl(S)) and 
  --     not (ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) \in knl(S))) .


  -- -- **************************************************************************************************************************************************************************************************
  -- =====> SECRECY OF MESSSAGE
  -- op seMess : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  -- eq seMess(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
  --   (
  --     not(A = intru or B = intru) and
  --     msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
  --       EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
  --       MLDSA-Sign(MLDSA-PriK(A), h(M)) || M))) ) \in nw(S) and
  --     MLDSA-Verify(MLDSA-PubK(A), MLDSA-Sign(mldsa-getPrivate(MLDSA-PubK(A)), h(M)), h(M)) and
  --     EdDSA-Verify(EdDSA-PubK(A), EdDSA-Sign(eddsa-getPrivate(EdDSA-PubK(A)), h(M)), h(M)) and
  --     sdec(kcombine(
  --       mlk-decaps(Mlk-Ci, MLK-PriK(B)) || 
  --       ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) || 
  --       Ecdhk-Ci || ECDHK-PubK(B) || 
  --       Mlk-Ci || MLK-PubK(B)), KC) = K and
  --     not (Ecdhk-SK2 \in leakscr(S)) and 
  --     not (Mlk-SK2 \in leakscr(S)) and 
  --     not (mlk-decaps(Mlk-Ci, MLK-PriK(B)) \in leakscr(S)) and 
  --     not (ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) \in leakscr(S)) and
  --     not (ECDHK-PriK(B) \in leakscr(S)) and 
  --     not (MLK-PriK(B) \in leakscr(S))
  --   ) implies 
  --     (not M \in knl(S)) .

  -- **************************************************************************************************************************************************************************************************
  -- -- =====> AUTHEN OF MESSAGE 

  -- op authenMess : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  -- eq authenMess(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
  --   (not(A = intru or B = intru) and
  --   not(mlk-decaps(Mlk-Ci,MLK-PriK(B)) \in leakscr(S)) and
  --   not(ecdhk-decaps(Ecdhk-Ci,ECDHK-PriK(B)) \in leakscr(S)) and
  --   not(MLK-PriK(B) \in leakscr(S)) and not(ECDHK-PriK(B) \in leakscr(S)) and
  --   not(Mlk-SK2 \in leakscr(S)) and not(Ecdhk-SK2 \in leakscr(S)) and
  --   -- not (EdDSA-PriK(A) \in leakscr(S)) and not (MLDSA-PriK(A) \in leakscr(S)) and
  --   msg2(A2,A,B, (ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || KC) || (senc(K,EdDSA-Sign(EdDSA-PriK(A),h(M)) || MLDSA-Sign(MLDSA-PriK(A),h(M)) || M))) \in nw(S) and
  --   MLDSA-Verify(MLDSA-PubK(A),MLDSA-Sign(mldsa-getPrivate(MLDSA-PubK(A)),h(M)),h(M)) and
  --   EdDSA-Verify(EdDSA-PubK(A),EdDSA-Sign(eddsa-getPrivate(EdDSA-PubK(A)),h(M)),h(M)) and
  --   sdec(kcombine(mlk-decaps(Mlk-Ci,MLK-PriK(B)) || ecdhk-decaps(Ecdhk-Ci,ECDHK-PriK(B)) || Ecdhk-Ci || ECDHK-PubK(B) || Mlk-Ci || MLK-PubK(B)),KC) = K) implies (msg2(A,A,B, (ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || KC) || (senc(K,EdDSA-Sign(EdDSA-PriK(A),h(M)) || MLDSA-Sign(MLDSA-PriK(A),h(M)) || M))) \in nw(S)) .

  op authenMess : Sys Prin Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  eq authenMess(S,A2,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
    (
      not(A = intru or B = intru) and
      msg2(A2,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
        EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
        MLDSA-Sign(MLDSA-PriK(A), h(M)) || M)))) \in nw(S) and
      MLDSA-Verify(MLDSA-PubK(A), MLDSA-Sign(mldsa-getPrivate(MLDSA-PubK(A)), h(M)), h(M)) and
      EdDSA-Verify(EdDSA-PubK(A), EdDSA-Sign(eddsa-getPrivate(EdDSA-PubK(A)), h(M)), h(M)) and
      sdec(kcombine(
        mlk-decaps(Mlk-Ci, MLK-PriK(B)) || 
        ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) || 
        Ecdhk-Ci || ECDHK-PubK(B) || 
        Mlk-Ci || MLK-PubK(B)), KC) = K and
      not (Ecdhk-SK2 \in leakscr(S)) and 
      not (Mlk-SK2 \in leakscr(S)) and 
      not (mlk-decaps(Mlk-Ci, MLK-PriK(B)) \in leakscr(S)) and 
      not (ecdhk-decaps(Ecdhk-Ci, ECDHK-PriK(B)) \in leakscr(S)) and
      not (ECDHK-PriK(B) \in leakscr(S)) and 
      not (MLK-PriK(B) \in leakscr(S))
    ) implies 
      (msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
        EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
        MLDSA-Sign(MLDSA-PriK(A), h(M)) || M)))) \in nw(S)) .

-- inv

  -- op inv0 : Sys Prin Prin RawMsg SessionKey ECDHK-SecretK MLK-SecretK MLK-Cipher ECDHK-Cipher Data -> Bool .
  -- eq inv0(S,A,B,M,K,Ecdhk-SK2,Mlk-SK2,Mlk-Ci,Ecdhk-Ci,KC) = 
  --   (not(A = intru or B = intru) and
  --   msg2(A,A,B, (ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || senc(kcombine(mlk-encapsK(MLK-PubK(B),Mlk-SK2) || ecdhk-encapsK(ECDHK-PubK(B),Ecdhk-SK2) || ecdhk-encapsC(ECDHK-PubK(B),Ecdhk-SK2) || ECDHK-PubK(B) || mlk-encapsC(MLK-PubK(B),Mlk-SK2) || MLK-PubK(B)),K)) || (senc(K,EdDSA-Sign(EdDSA-PriK(A),h(M)) || MLDSA-Sign(MLDSA-PriK(A),h(M)) || M))) \in nw(S)) implies not (K \in knl(S)) .

  op inv0 : Sys Prin Prin SessionKey MLK-Cipher ECDHK-Cipher -> Bool
  eq inv0(S,A,B,K,Mlk-Ci,Ecdhk-Ci) = (K \in knl(S))
    implies (mlk-decaps(Mlk-Ci,MLK-PriK(B)) \in knl(S) and ecdhk-decaps(Ecdhk-Ci,ECDHK-PriK(B)) \in knl(S)) .
  
  op inv1 : Sys ECDHK-SecretK ECDHK-SecretK -> Bool
  eq inv1(S,Ecdhk-SK,Ecdhk-SK2) = ((Ecdhk-SK & Ecdhk-SK2) \in knl(S) implies 
    (Ecdhk-SK \in usecret(S) and Ecdhk-SK2 \in usecret(S))) .
  
  op inv2 : Sys MLK-SecretK MLK-SecretK -> Bool
  eq inv2(S,Mlk-SK,Mlk-SK2) = ((Mlk-SK & Mlk-SK2) \in knl(S) implies 
    (Mlk-SK \in usecret(S) and Mlk-SK2 \in usecret(S))) .

  op inv3 : Sys ECDHK-SecretK MLK-SecretK -> Bool
  eq inv3(S,Ecdhk-SK,Mlk-SK) = ((Ecdhk-SK \in knl(S) and Mlk-SK \in knl(S)) 
    implies (Ecdhk-SK \in usecret(S) and Mlk-SK \in usecret(S))) .
  
  op inv4 : Sys ECDHK-SecretK ECDHK-Cipher -> Bool
  eq inv4(S,Ecdhk-SK,Ecdhk-Ci) = (ecdhk-decaps(Ecdhk-Ci,Ecdhk-SK) \in knl(S) implies 
    (Ecdhk-SK \in usecret(S))) .
  
  op inv5 : Sys MLK-SecretK MLK-Cipher -> Bool
  eq inv5(S,Mlk-SK,Mlk-Ci) = (mlk-decaps(Mlk-Ci,Mlk-SK) \in knl(S) implies 
    (Mlk-SK \in usecret(S))) .
  
  op inv6 : Sys ECDHK-Cipher MLK-Cipher -> Bool
  eq inv6(S,Ecdhk-Ci,Mlk-Ci) = (Ecdhk-Ci \in knl(S) and Mlk-Ci \in knl(S) 
    implies ecdhk-getSecret(Ecdhk-Ci) \in usecret(S) and mlk-getSecret(Mlk-Ci) \in usecret(S)) .

  op inv7 : Sys ECDHK-PublicK MLK-PublicK -> Bool
  eq inv7(S,Ecdhk-PK,Mlk-PK) = (Ecdhk-PK \in knl(S) and Mlk-PK \in knl(S)
    implies ecdhk-getSecret(Ecdhk-PK) \in usecret(S) and mlk-getSecret(Mlk-PK) \in usecret(S)) .
  
  op inv8 : Sys Prin -> Bool
  eq inv8(S,A) = 
    (not(A = intru or MLDSA-PriK(A) \in leakscr(S) or EdDSA-PriK(A) \in leakscr(S)) 
      implies not(MLDSA-PriK(A) \in knl(S)) and not(EdDSA-PriK(A) \in knl(S))) .

  -- Lemma cho trường hợp leak khóa bí mật
  op lemmaLeakSecretKey : Sys Prin ECDHK-SecretK MLK-SecretK -> Bool
  eq lemmaLeakSecretKey(S,B,Ecdhk-SK,Mlk-SK) = 
    (not(B = intru) and
     not(ECDHK-PriK(B) \in leakscr(S)) and
     not(MLK-PriK(B) \in leakscr(S)))
    implies 
    (not(Ecdhk-SK \in knl(S)) and
     not(Mlk-SK \in knl(S))) .

  -- Lemma cho trường hợp leak khóa chia sẻ
  op lemmaLeakShareKey : Sys Prin ECDHK-Cipher MLK-Cipher -> Bool
  eq lemmaLeakShareKey(S,B,Ecdhk-Ci,Mlk-Ci) = 
    (not(B = intru) and
     not(ECDHK-PriK(B) \in leakscr(S)) and
     not(MLK-PriK(B) \in leakscr(S)))
    implies 
    (not(ecdhk-decaps(Ecdhk-Ci,ECDHK-PriK(B)) \in knl(S)) and
     not(mlk-decaps(Mlk-Ci,MLK-PriK(B)) \in knl(S))) .

  -- Lemma cho trường hợp leak khóa công khai
  op lemmaLeakPublicKey : Sys Prin ECDHK-PublicK MLK-PublicK -> Bool
  eq lemmaLeakPublicKey(S,B,Ecdhk-PK,Mlk-PK) = 
    (not(B = intru) and
     not(ECDHK-PriK(B) \in leakscr(S)) and
     not(MLK-PriK(B) \in leakscr(S)))
    implies 
    (not(ecdhk-getSecret(Ecdhk-PK) \in knl(S)) and
     not(mlk-getSecret(Mlk-PK) \in knl(S))) .

  -- Lemma cho trường hợp leak bản mã
  op lemmaLeakCipher : Sys Prin ECDHK-Cipher MLK-Cipher -> Bool
  eq lemmaLeakCipher(S,B,Ecdhk-Ci,Mlk-Ci) = 
    (not(B = intru) and
     not(ECDHK-PriK(B) \in leakscr(S)) and
     not(MLK-PriK(B) \in leakscr(S)))
    implies 
    (not(ecdhk-getSecret(Ecdhk-Ci) \in knl(S)) and
     not(mlk-getSecret(Mlk-Ci) \in knl(S))) .

  -- Lemma ngắn cho message secrecy
  op lemmaShortSecrecy : Sys Prin Prin RawMsg SessionKey -> Bool
  eq lemmaShortSecrecy(S,A,B,M,K) = 
    (not(A = intru or B = intru) and
     not(K \in usecret(S)))
    implies 
    (not(M \in knl(S))) .
  
    -- Lemma ngắn cho session key
  op lemmaShortSessionKey : Sys Prin Prin SessionKey -> Bool
  eq lemmaShortSessionKey(S,A,B,K) = 
    (not(A = intru or B = intru) and
     not(K \in usecret(S)))
    implies 
    (not(K \in knl(S))) .
  
  op lemmaUsedSessionKey : Sys Prin Prin RawMsg SessionKey MLK-Cipher ECDHK-Cipher Data -> Bool
  eq lemmaUsedSessionKey(S,A,B,M,K,Mlk-Ci,Ecdhk-Ci,KC) = 
    (not(A = intru or B = intru) and
    msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
        EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
        MLDSA-Sign(MLDSA-PriK(A), h(M)) || M)))) \in nw(S))
    implies 
    (K \in usecret(S)) .
  
  op lemmaDecrypt : Sys Prin Prin Data Data Data -> Bool
  eq lemmaDecrypt(S,A,B,D1,D2,D3) = 
    (not(A = intru or B = intru) and
    D3 \in sdec(D1,D2))
    implies 
    (D3 \in knl(S)) .

  op lemmaSending : Sys Prin Prin RawMsg SessionKey MLK-Cipher ECDHK-Cipher Data -> Bool
  eq lemmaSending(S,A,B,M,K,Mlk-Ci,Ecdhk-Ci,KC) = 
    (not(A = intru or B = intru) and
    not (K \in usecret(S) and ( msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
        EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
        MLDSA-Sign(MLDSA-PriK(A), h(M)) || M))))) \in nw(S)))
    implies 
    (not K \in knl(S)) .
  
  op lemmaMsg : Sys Prin Prin RawMsg SessionKey MLK-Cipher ECDHK-Cipher Data -> Bool
  eq lemmaMsg(S,A,B,M,K,Mlk-Ci,Ecdhk-Ci,KC) = 
    (not(A = intru or B = intru) and
    not msg2(A,A,B, (Ecdhk-Ci || Mlk-Ci || KC || (senc(K,
        EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
        MLDSA-Sign(MLDSA-PriK(A), h(M)) || M)))) \in nw(S))
    implies 
    not (KC \in knl(S) and senc(K,
        EdDSA-Sign(EdDSA-PriK(A), h(M)) || 
        MLDSA-Sign(MLDSA-PriK(A), h(M)) || M) \in knl(S)) .
}
