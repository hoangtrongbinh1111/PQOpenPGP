A (simplified) tethered drone can fly at only two levels - low and high, and can fly from 1m to 10m from the operator. A drone starts at time 0s, at low level, 1m from the operator. A drone can transition levels, and change it's distance from the operator in steps of 1m. Each transition takes 1s. Prove that a drone can reach the high level, 5m from the operator, in 5s. Then try 21s, and compare the proofs in IDV. Then trys 22s. Then try "at some time" - how long did it take?

time is a type
level is a type
distance is a type

low is a level
high is a level

d1 to d10 are distance

t0 is a time
s takes a time and returns time

state takes time, level, distance and returns boolean
adjacent takes 2 distance and returns boolean


tff(level_type,type,   level: $tType ).
tff(state_decl, type, state: ($int * level * $int) > $o) .

tff(low_decl,type,      low: level ).
tff(high_decl,type,      high: level ).

% Initial state
tff(start,axiom, state(0,low,1) ).

% Up: Change from low to high
tff(up,axiom,
  ![T:$int, D:$int] :
    ( state(T,low,D) => state($sum(T,1),high,D) )
).

% Down: Change from high to low
tff(down,axiom,
  ![T:$int, D:$int] :
    ( state(T,high,D) => state($sum(T,1),low,D) )
).

% In: Move closer (D decrease)
tff(in,axiom,
  ![T:$int, L:level, D:$int] :
    ( ($greater(D,1) & state(T,L,D)) => state($sum(T,1),L,$difference(D,1)) )
) .

% Out: Move farther (D increase)
tff(out,axiom,
  ![T:$int, L:level, D:$int] :
    ( ($less(D,10) & state(T,L,D)) => state($sum(T,1),L,$sum(D,1)) )
).

% Nothing
tff(nothing,axiom,
  ![T:$int, L:level, D:$int] :
    ( ($less(D,10) & state(T,L,D)) => state($sum(T,1),L,D) )
).

tff(end,conjecture, state(21,high,5)) .

tff(owner_of_decl,type, owner_of: dog > person ).
tff(bit_decl,type,      bit: ( dog * person * $int ) > $o ).
tff(hates_decl,type,    hates: ( person * person ) > $o ).
tff(chases_decl,type,   chases: ( person * dog ) > $o ).

tff(tom_not_owner_of_spike,axiom,
    owner_of(spike) != tom ).

tff(spike_bit_tom_thrice,axiom,
    bit(spike,tom,3) ).

tff(dog_bites_then_hate_owner,axiom,
    ! [D: dog,P: person,N: $int] :
      ( ( bit(D,P,N)
        & $greater(N,1)
        & ( owner_of(D) != P ) )
     => hates(P,owner_of(D)) ) ).

tff(dog_bites_then_chase,axiom,
    ! [D: dog,P: person,N: $int] :
      ( ( bit(D,P,N)
        & $greater(N,0) )
     => chases(P,D) ) ).

tff(tom_chase_and_hate,conjecture,
    ? [D: dog,P: person] :
      ( chases(tom,D)
      & P != tom
      & hates(tom,P) ) ).
